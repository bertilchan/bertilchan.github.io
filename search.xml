<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>初步认识Serverless架构</title>
      <link href="/2021/08/13/chu-bu-ren-shi-serverless-jia-gou/"/>
      <url>/2021/08/13/chu-bu-ren-shi-serverless-jia-gou/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-Serverless架构介绍"><a href="#1-Serverless架构介绍" class="headerlink" title="1.Serverless架构介绍"></a>1.Serverless架构介绍</h3><p>Serverless又名无服务器，所谓无服务器并不是说不需要依赖和依靠服务器等资源，而是开发者再也不用过多考虑服务器的问题，可以更专注在产品代码上，狭义的Serverless是FaaS（云函数）和BaaS（可以理解为数据库、对象存储）组成。</p><h3 id="2-传统的高并发架构"><a href="#2-传统的高并发架构" class="headerlink" title="2.传统的高并发架构"></a>2.传统的高并发架构</h3><p><img src="https://img-blog.csdnimg.cn/36b31be0084142d3b5c89bd9294df87e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JlcnRpbA==,size_16,color_FFFFFF,t_70" alt="请添加图片描述"></p><p>采购服务器（哪些服务器作为数据库服务器、哪些作为web服务器）、搭建环境（配置负载均衡…）、部署后还需要维护服务器</p><h3 id="3-Serverless高并发架构"><a href="#3-Serverless高并发架构" class="headerlink" title="3.Serverless高并发架构"></a>3.Serverless高并发架构</h3><p><img src="https://img-blog.csdnimg.cn/30ebdda58f644a19a6c1fa89a7ee0b81.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JlcnRpbA==,size_16,color_FFFFFF,t_70" alt="请添加图片描述"><br>Serverless不需要考虑服务器的问题，只需要将代码上传到Serverless服务器上面即可。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Serverless </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode接口测试插件—Postcode</title>
      <link href="/2021/08/07/vscode-jie-kou-ce-shi-cha-jian-postcode/"/>
      <url>/2021/08/07/vscode-jie-kou-ce-shi-cha-jian-postcode/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>以前一直在用 <code>Postman</code> 做 <code>API</code> 测试，如果同时在使用 <code>vscode</code> 开发时，每次切出去可能比较烦，其实就是太懒了。。。</p><p>作为一个懒人，不久前刚出来的Postcode就非常适合了！</p><p>Postcode 是一个 <code>Visual Studio Code</code> 扩展</p><p><img src="https://img-blog.csdnimg.cn/3b518e41561d4d62b72bd9d7f1000d5a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JlcnRpbA==,size_16,color_FFFFFF,t_70" alt="请添加图片描述"></p><p>它可以看作是 <code>Postman</code> 的替代品，基本上 <code>Postman</code> 的常用功能它都有：<br><img src="https://img-blog.csdnimg.cn/6ac5495d9c194721a177ea360ff6e063.gif" alt="请添加图片描述"></p><ul><li>类似于 <code>Postman</code> 的直观 UI，与任何 VSCode 主题无缝匹配</li><li>支持 <code>GraphQL</code> 请求</li><li>支持从请求中生成代码片段<br><img src="https://img-blog.csdnimg.cn/f70026b4b98545b2a38db13820689b7f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JlcnRpbA==,size_16,color_FFFFFF,t_70" alt="请添加图片描述"></li></ul><p>并且，可以使用 vscode 的命令快捷启动：</p><ul><li>通过按 (<code>Ctrl+Shift+P</code>或<code>Cmd+Shift+P</code>在 Mac 上) 并键入<code>Postcode: Create Request</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Postcode </tag>
            
            <tag> 接口测试 </tag>
            
            <tag> vscode插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git：解决本地库同时关联GitHub和Gitee</title>
      <link href="/2021/08/06/git-jie-jue-ben-di-ku-tong-shi-guan-lian-github-he-gitee/"/>
      <url>/2021/08/06/git-jie-jue-ben-di-ku-tong-shi-guan-lian-github-he-gitee/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-配置远程仓库免密登陆"><a href="#1-配置远程仓库免密登陆" class="headerlink" title="1.配置远程仓库免密登陆"></a>1.配置远程仓库免密登陆</h2><p>首先找到GitHub和Gitee配置ssh公钥的地方，然后把用户主目录下的<code>.ssh/id_rsa.pub</code>文件的内容粘贴进去。</p><h2 id="2-添加远程仓库"><a href="#2-添加远程仓库" class="headerlink" title="2.添加远程仓库"></a>2.添加远程仓库</h2><ul><li>首先在GitHub和Gitee分别新建一个仓库gitTest</li></ul><p><img src="https://img-blog.csdnimg.cn/caa9fc87cb81475f8a547e8be1dd4904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JlcnRpbA==,size_16,color_FFFFFF,t_70" alt="请添加图片描述"></p><p><img src="https://img-blog.csdnimg.cn/887d35a8956648048198838bf02bf39e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JlcnRpbA==,size_16,color_FFFFFF,t_70" alt="请添加图片描述"></p><ul><li>然后，在本地新建一个文件夹gitTest，右键点击git bash后输入<code>git init</code>对仓库进行初始化</li><li>接着，我们在本地库上使用命令<code>git remote add</code>把它同时和Github、Gitee的远程库关联起来</li></ul><pre class="line-numbers language-git" data-language="git"><code class="language-git">git remote add github git@github.com:bertilchan/gitTest.gitgit remote add gitee git@gitee.com:bertil/git-test.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>此处可以为https地址也可以是ssh地址，orign为设置的远程仓库的别名（如果我们关联两个的话，则需要设置不同名，比如github和gitee），<strong>强烈建议使用ssh方式</strong>，因为https方式每次都要输入用户名和密码</em></p><ul><li>关联完成后，我们可以通过输入<code>git remote -v</code>来查看关联的远程库信息</li></ul><p><img src="https://img-blog.csdnimg.cn/2f89df29d75c45a5ab068a3ba51dd41b.png" alt="请添加图片描述"></p><ul><li>最后，我们可以测试一下</li></ul><p>在本地新建一个README.md文件，看能否成功提交到两个远程仓库（首次提交我们需要添加参数 -u  这样可以帮我们把分支自动关联起来，在以后的推送或者拉取时就可以简化命令。）</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">touch README.mdgit add README.mdgit commit -m <span class="token string">"first commit"</span>git push -u github mastergit push -u gitee master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行完成上述命令后，我们就可以在刚才新建的Github和Gitee远程仓库上看到我们的提交了。</p><p><img src="https://img-blog.csdnimg.cn/da0485a4f6e945e8bf64789836dbb033.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JlcnRpbA==,size_16,color_FFFFFF,t_70" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/462e53c8d90e4056a3f77ca8eb948b18.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JlcnRpbA==,size_16,color_FFFFFF,t_70" alt="请添加图片描述"></p><ul><li>这样一来，我们的本地库就可以同时与多个远程库互相同步：</li></ul><p><img src="https://img-blog.csdnimg.cn/1a69467c34e14daa8eeb91f1c1b04dca.png" alt="请添加图片描述"></p><p>如果要推送到GitHub，使用命令：<code>git push github master</code></p><p>如果要推送到Gitee，使用命令：<code>git push gitee master</code></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06TypeScript：项目实战—贪吃蛇</title>
      <link href="/2021/08/05/06typescript-xiang-mu-shi-zhan-tan-chi-she/"/>
      <url>/2021/08/05/06typescript-xiang-mu-shi-zhan-tan-chi-she/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-项目搭建"><a href="#1-项目搭建" class="headerlink" title="1.项目搭建"></a>1.项目搭建</h2><ul><li>准备好之前的webpack.config.js、tsconfig.json、package.json、package-lock.json四个文件，然后执行<code>npm i</code>安装依赖</li><li>安装其他依赖：<code>npm i -D less less-loader css-loader style-loader</code>（四个包，因为要使用到less）<strong>如果有其他web资源的话则还需引入web资源的加载器，引入方法类似</strong></li><li>修改webpack配置文件—在rules中添加</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//设置less文件的处理</span><span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>use<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span><span class="token string">"css-loader"</span><span class="token punctuation">,</span><span class="token string">"less-loader"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就能在项目中使用less了。执行<code>npm run build</code>并打开dist中的index.html即可看到效果。</p><ul><li>安装postcss来处理css的浏览器兼容性问题：<code>npm i -D postcss postcss-loader postcss-preset-env</code>，并在webpack中引入</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//设置less文件的处理</span><span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>use<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span><span class="token string">"css-loader"</span><span class="token punctuation">,</span><span class="token comment">//引入postcss</span><span class="token punctuation">{</span>loader<span class="token operator">:</span> <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>options<span class="token operator">:</span> <span class="token punctuation">{</span>postcssOptions<span class="token operator">:</span> <span class="token punctuation">{</span>                    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token punctuation">[</span>                            <span class="token string">"postcss-preset-env"</span><span class="token punctuation">,</span>                            <span class="token punctuation">{</span>                                browsers<span class="token operator">:</span> <span class="token string">'last 2 versions'</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"less-loader"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以看到在打包后的js文件中，有些css属性会加上浏览器前缀。</p><h2 id="2-项目界面"><a href="#2-项目界面" class="headerlink" title="2.项目界面"></a>2.项目界面</h2><p><img src="https://img-blog.csdnimg.cn/729c701e27bd4aad9488662e005b55f4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JlcnRpbA==,size_16,color_FFFFFF,t_70" alt="请添加图片描述"></p><p><strong>index.html</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>贪吃蛇<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 创建游戏的主容器 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 设置游戏的舞台 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stage<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 设置蛇 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>snake<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!-- snake内部的div 表示蛇的各部分 --&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 设置食物 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>food<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!-- 添加4个小div 来设置食物的样式 --&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 设置游戏的积分牌 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>score-panel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>                SCORE: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>score<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>                Level: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>level<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>index.less</strong></p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token comment">// 设置变量</span><span class="token variable">@bg-color<span class="token punctuation">:</span></span> #b7d4a8<span class="token punctuation">;</span><span class="token comment">// 清除默认样式</span><span class="token selector">*</span> <span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token comment">// 改变盒子模型的计算方式</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border<span class="token operator">-</span>box<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">body</span> <span class="token punctuation">{</span>    <span class="token property">font</span><span class="token punctuation">:</span> bold 20px <span class="token string">"Courier"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 设置主窗口的样式</span><span class="token selector">#main</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 360px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 420px<span class="token punctuation">;</span>    <span class="token comment">// 设置背景颜色</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">@bg-color</span><span class="token punctuation">;</span>    <span class="token comment">// 设置居中</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 10px solid black<span class="token punctuation">;</span>    <span class="token comment">// 设置圆角</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>    <span class="token comment">// 开启弹性盒模型</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token comment">// 设置主轴的方向</span>    <span class="token property">flex-flow</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>    <span class="token comment">// 设置辅轴（侧轴）对其方式</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token comment">// 设置主轴的对齐方式</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space<span class="token operator">-</span>around<span class="token punctuation">;</span>    <span class="token comment">// 游戏舞台</span>    <span class="token selector">#stage</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 304px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 304px<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 2px solid black<span class="token punctuation">;</span>        <span class="token comment">// 开启相对定位</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token comment">// 设置蛇的样式</span>        <span class="token selector">#snake</span> <span class="token punctuation">{</span>            <span class="token selector">&amp;&gt;div</span> <span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> 1px solid <span class="token variable">@bg-color</span><span class="token punctuation">;</span>                <span class="token comment">// 开启绝对定位</span>                <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token selector">#food</span> <span class="token punctuation">{</span>            <span class="token comment">// 开启绝对定位</span>            <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token comment">// background-color: red;</span>            <span class="token comment">// 开启弹性盒子</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token comment">// 设置横轴为主轴, wrap表示会自动换行</span>            <span class="token property">flex-flow</span><span class="token punctuation">:</span> row wrap<span class="token punctuation">;</span>            <span class="token comment">// 设置主轴和侧轴的空白空间分配到元素之间</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> space<span class="token operator">-</span>between<span class="token punctuation">;</span>            <span class="token property">align-content</span><span class="token punctuation">:</span> space<span class="token operator">-</span>between<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token selector">&amp;&gt;div</span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>                <span class="token comment">// 使四个div旋转45度</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 记分牌</span><span class="token selector">#score-panel</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token comment">// 设置主轴对齐方式</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space<span class="token operator">-</span>between<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-定义Food类"><a href="#3-定义Food类" class="headerlink" title="3.定义Food类"></a>3.定义Food类</h2><p>Food类为定义食物的类</p><p><strong>主要实现</strong></p><ul><li>获取食物的坐标</li><li>修改食物的位置（随机生成）</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 定义食物类Food</span><span class="token keyword">class</span> <span class="token class-name">Food</span><span class="token punctuation">{</span>    <span class="token comment">// 定义的一个属性表示食物所对应的元素</span>    element<span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 获取页面中的food元素并将其赋值给element</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'food'</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 定义一个获取食物X轴坐标的方法</span>    <span class="token keyword">get</span> <span class="token constant">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 定义一个获取食物Y轴坐标的方法</span>    <span class="token keyword">get</span> <span class="token constant">Y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 修改食物位置</span>    <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 生成一个随机的位置</span>        <span class="token comment">// 食物的位置最小是0， 最大是290</span>        <span class="token comment">// 蛇移动一次就是一格，一格大小就是10，所以要求食物的坐标必须是整10</span>        <span class="token comment">// Math.round(Math.random() * 290);//生成一个[0,290]的整数</span>       <span class="token keyword">let</span> top <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">29</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>       <span class="token keyword">let</span> left <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">29</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">// Math.floor(Math.random() * 30) * 10;//向下取整</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> top <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 测试代码</span><span class="token comment">// const food = new Food();</span><span class="token comment">// console.log(food.X, food.Y);</span><span class="token comment">// food.change();</span><span class="token comment">// console.log(food.X, food.Y);</span><span class="token keyword">export</span> <span class="token keyword">default</span> Food<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-定义ScorePanel类"><a href="#4-定义ScorePanel类" class="headerlink" title="4.定义ScorePanel类"></a>4.定义ScorePanel类</h2><p>ScorePanel类为定义记分牌的类</p><p><strong>主要实现</strong></p><ul><li>记录分数和等级</li><li>实现加分功能</li><li>实现升级功能</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 定义表示记分牌的类</span><span class="token keyword">class</span> <span class="token class-name">ScorePanel</span><span class="token punctuation">{</span>    <span class="token comment">// score和level用来记录分数和等级</span>    score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    level <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 分数和等级所在的元素，在构造函数中进行初始化</span>    scoreEle<span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    levelEle<span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token comment">// 设置一个变量限制等级</span>    maxLevel<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    <span class="token comment">// 设置一个变量表示多少分时升级</span>    upScore<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>maxLevel<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> upScore<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scoreEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'score'</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span><span class="token comment">//后面加 ! 表示该值一定不为空</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>levelEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'level'</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxLevel <span class="token operator">=</span> maxLevel<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>upScore <span class="token operator">=</span> upScore<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 设置加分的方法</span>    <span class="token function">addScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 使分数自增</span>        <span class="token comment">// this.score++;</span>        <span class="token comment">// this.scoreEle.innerHTML = this.score + '';</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scoreEle<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token comment">// 判断分数是多少</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>upScore <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">levelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 提升等级的方法</span>    <span class="token function">levelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>levelEle<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 测试代码</span><span class="token comment">// const scorePanel = new ScorePanel(100, 2);</span><span class="token comment">// scorePanel.addScore();</span><span class="token comment">// scorePanel.addScore();</span><span class="token comment">// scorePanel.addScore();</span><span class="token comment">// for (let i = 0; i &lt; 200; i++) {</span><span class="token comment">//     scorePanel.addScore();</span><span class="token comment">// }</span><span class="token keyword">export</span> <span class="token keyword">default</span> ScorePanel<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-定义Snake类"><a href="#5-定义Snake类" class="headerlink" title="5.定义Snake类"></a>5.定义Snake类</h2><p>Snake类为定义蛇的类</p><p><strong>主要实现</strong></p><ul><li>获取和设置蛇头的坐标</li><li>蛇身体变长</li><li>蛇不能掉头</li><li>蛇身体移动</li><li>检查蛇头是否撞到身体</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Snake</span><span class="token punctuation">{</span>    <span class="token comment">// 表示蛇头的元素</span>    head<span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token comment">// 蛇的身体（包括蛇头）</span>    bodies<span class="token operator">:</span> HTMLCollection<span class="token punctuation">;</span>    <span class="token comment">// 获取蛇的容器</span>    element<span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'snake'</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#snake &gt; div'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">;</span>        <span class="token comment">// document.querySelectorAll('#snake &gt; div');// nodeList</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bodies <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取蛇的坐标（蛇头坐标）</span>    <span class="token keyword">get</span> <span class="token constant">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取蛇的Y轴坐标</span>    <span class="token keyword">get</span> <span class="token constant">Y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>offsetTop    <span class="token punctuation">}</span>    <span class="token comment">// 设置蛇头的坐标</span>    <span class="token keyword">set</span> <span class="token constant">X</span><span class="token punctuation">(</span>value<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 如果新值和旧值相同，则直接返回不再修改 （加判断只是为了可以减少修改属性的次数，提升性能）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">X</span> <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// X值的合法范围0-290之间</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> value <span class="token operator">&gt;</span> <span class="token number">290</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 进入判断说明蛇撞墙了</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"蛇撞墙了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 修改x时，是在修改水平坐标，蛇在左右移动，蛇在向左移动时，不能向右掉头，反之亦然</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bodies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bodies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span>offsetLeft <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// console.log('水平方向发生了掉头');</span>            <span class="token comment">// 如果发生了掉头，让蛇向方向继续移动</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">X</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 如果新值value大于旧值X， 则说明蛇在向右走，此时发生掉头，应该使蛇继续向左走</span>                value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">X</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">// 向左走</span>                value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">X</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 移动身体</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">moveBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> value <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>         <span class="token comment">// 检查有没有撞自己</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkHeadBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">set</span> <span class="token constant">Y</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 如果新值和旧值相同，则直接返回不再修改</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">Y</span> <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// Y值的合法范围0-290之间</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> value <span class="token operator">&gt;</span> <span class="token number">290</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 进入判断说明蛇撞墙了</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"蛇撞墙了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 修改Y时，是在修改水平坐标，蛇在上下移动，蛇在向上移动时，不能向下掉头，反之亦然</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bodies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bodies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span>offsetTop <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// console.log('垂直方向发生了掉头');</span>            <span class="token comment">// 如果发生了掉头，让蛇向方向继续移动</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">Y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 如果新值value大于旧值Y， 则说明蛇在向下走，此时发生掉头，应该使蛇继续向上走</span>                value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">Y</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">// 向上走</span>                value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">Y</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 移动身体</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">moveBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> value <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        <span class="token comment">// 检查有没有撞自己</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkHeadBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 蛇增加身体的方法</span>    <span class="token function">addBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 向element中添加一个div</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">"beforeend"</span><span class="token punctuation">,</span> <span class="token string">"&lt;div&gt;&lt;/div&gt;"</span><span class="token punctuation">)</span><span class="token comment">//添加到结束标签前</span>    <span class="token punctuation">}</span>    <span class="token comment">// 添加一个蛇身体移动的方法</span>    <span class="token function">moveBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">/*             从后往前改            将后面的身体设置为前面身体的位置                举例子：                    第4节 = 第3节的位置                    第3节 = 第2节的位置                    第2节 = 蛇头的位置        */</span>        <span class="token comment">//遍历获取所有的身体</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bodies<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 获取前面身体的位置</span>            <span class="token keyword">let</span> <span class="token constant">X</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bodies<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>            <span class="token keyword">let</span> <span class="token constant">Y</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bodies<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>            <span class="token comment">// 将这个值设置到当前身体上</span>            <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bodies<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">X</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bodies<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token constant">Y</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 检查蛇头是否撞到身体的方法</span>    <span class="token function">checkHeadBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 获取所有的身体，检查是否和蛇头的坐标发生重叠</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bodies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> bd <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bodies<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">X</span> <span class="token operator">===</span> bd<span class="token punctuation">.</span>offsetLeft <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">Y</span> <span class="token operator">===</span> bd<span class="token punctuation">.</span>offsetTop<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 进入判断说明蛇头撞到了身体，游戏结束</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"撞到自己了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Snake<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-定义GameControl类"><a href="#6-定义GameControl类" class="headerlink" title="6.定义GameControl类"></a>6.定义GameControl类</h2><p>GameControl类为游戏控制器，来控制其他的所有类。</p><p><strong>主要实现</strong></p><ul><li>键盘事件</li><li>使蛇移动</li><li>蛇撞墙</li><li>吃食检测</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 引入其他的类</span><span class="token keyword">import</span> Snake <span class="token keyword">from</span> <span class="token string">"./Snake"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Food <span class="token keyword">from</span> <span class="token string">"./Food"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ScorePanel <span class="token keyword">from</span> <span class="token string">"./ScorePanel"</span><span class="token punctuation">;</span><span class="token comment">// 游戏控制器，控制其他的所有类</span><span class="token keyword">class</span> <span class="token class-name">GameControl</span> <span class="token punctuation">{</span>    <span class="token comment">// 定义三个属性</span>    <span class="token comment">// 蛇</span>    snake<span class="token operator">:</span> Snake<span class="token punctuation">;</span>    <span class="token comment">// 食物</span>    food<span class="token operator">:</span> Food<span class="token punctuation">;</span>    <span class="token comment">// 记分牌</span>    scorePanel<span class="token operator">:</span> ScorePanel<span class="token punctuation">;</span>    <span class="token comment">// 创建一个属性来存储蛇的移动方向(也就是按键的方向)</span>    direction<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token comment">// 创建一个属性用来记录游戏是否结束</span>    isLive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>snake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>food <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Food</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scorePanel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScorePanel</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 游戏的初始化方法，调用后游戏即开始</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 绑定键盘按下的事件</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keydown'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">keydownHandler</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 涉及到this和bind知识</span>        <span class="token comment">// 调用run()方法，使蛇移动</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*  谷歌    ie        ArrowUp Up        ArrowDown Down        ArrowRight Right        ArrowLeft Left    */</span>    <span class="token comment">// 创建一个键盘按下的响应函数</span>    <span class="token function">keydownHandler</span><span class="token punctuation">(</span>event<span class="token operator">:</span> KeyboardEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// console.log(this);</span>        <span class="token comment">// 需要检查event.key的值是否合法(用户是否按了正确的按键)</span>        <span class="token comment">// 修改direction属性</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>direction <span class="token operator">=</span> event<span class="token punctuation">.</span>key        <span class="token comment">// console.log(event.key);</span>    <span class="token punctuation">}</span>    <span class="token comment">// 创建一个控制蛇移动的方法</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/*             根据方向(this.direction)来使蛇的位置改变            向上 top 减少            向下 top 增加            向左 left 减少            向右 left 增加         */</span>        <span class="token comment">// 获取蛇现在的坐标</span>        <span class="token keyword">let</span> <span class="token constant">X</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>snake<span class="token punctuation">.</span><span class="token constant">X</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> <span class="token constant">Y</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>snake<span class="token punctuation">.</span><span class="token constant">Y</span><span class="token punctuation">;</span>        <span class="token comment">// 根据按键方向修改X值和Y值</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"ArrowUp"</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token string">"Up"</span><span class="token operator">:</span>                <span class="token comment">// 向上移动 top 减少</span>                <span class="token constant">Y</span> <span class="token operator">-=</span> <span class="token number">10</span><span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"ArrowDown"</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token string">"Down"</span><span class="token operator">:</span>                <span class="token comment">// 向下移动 top 增加</span>                <span class="token constant">Y</span> <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"ArrowLeft"</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token string">"Left"</span><span class="token operator">:</span>                <span class="token comment">// 向左移动 left 减少</span>                <span class="token constant">X</span> <span class="token operator">-=</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"ArrowRight"</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token string">"Right"</span><span class="token operator">:</span>                <span class="token comment">// 向右移动 left 增加</span>                <span class="token constant">X</span> <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token comment">// 检查蛇是否吃到了食物</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkEat</span><span class="token punctuation">(</span><span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// if (this.checkEat(X, Y)) {</span>        <span class="token comment">//     console.log('吃到食物了~~');</span>        <span class="token comment">//     // 食物的位置进行重置</span>        <span class="token comment">//     this.food.change();</span>        <span class="token comment">//     // 分数增加</span>        <span class="token comment">//     this.scorePanel.addScore();</span>        <span class="token comment">//     // 蛇要增加一节</span>        <span class="token comment">//     this.snake.addBody();</span>        <span class="token comment">// }</span>        <span class="token comment">// 修改蛇的X和Y值</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>snake<span class="token punctuation">.</span><span class="token constant">X</span> <span class="token operator">=</span> <span class="token constant">X</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>snake<span class="token punctuation">.</span><span class="token constant">Y</span> <span class="token operator">=</span> <span class="token constant">Y</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 进入到catch, 说明出现了异常，游戏结束，弹出一个提示信息</span>            <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token operator">+</span> <span class="token string">'GAME OVER!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将isLive设置为false</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>isLive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token comment">// 开启一个定时调用</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isLive <span class="token operator">&amp;&amp;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">300</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scorePanel<span class="token punctuation">.</span>level <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 定义一个方法，用来检查蛇是否吃到食物</span>    <span class="token function">checkEat</span><span class="token punctuation">(</span><span class="token constant">X</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">X</span> <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>food<span class="token punctuation">.</span><span class="token constant">X</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">Y</span> <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>food<span class="token punctuation">.</span><span class="token constant">Y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'吃到食物了~~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 食物的位置进行重置</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>food<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 分数增加</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>scorePanel<span class="token punctuation">.</span><span class="token function">addScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 蛇要增加一节</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>snake<span class="token punctuation">.</span><span class="token function">addBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> GameControl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-项目入口文件index-ts"><a href="#7-项目入口文件index-ts" class="headerlink" title="7.项目入口文件index.ts"></a>7.项目入口文件index.ts</h2><p>将上述定义的四个类放在文件夹modules中，并将GameControl引入到index.ts中。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 引入样式</span><span class="token keyword">import</span> <span class="token string">'./style/index.less'</span><span class="token punctuation">;</span><span class="token keyword">import</span> GameControl <span class="token keyword">from</span> <span class="token string">"./modules/GameControl"</span><span class="token punctuation">;</span><span class="token keyword">const</span> gameControl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// setInterval(()=&gt;{</span><span class="token comment">//     console.log(gameControl.direction);</span><span class="token comment">// }, 1000);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，就完成了用ts实现贪吃蛇的项目。</p><p>附上项目<strong>源码地址</strong>：<a href="https://github.com/bertilchan/typescript_snake">https://github.com/bertilchan/typescript_snake</a></p><p><font color="red">欢迎fork，感谢star (●’◡’●)</font></p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 贪吃蛇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05TypeScript：面向对象</title>
      <link href="/2021/08/05/05typescript-mian-xiang-dui-xiang/"/>
      <url>/2021/08/05/05typescript-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1.面向对象"></a>1.面向对象</h2><p>面向对象是程序中一个非常重要的思想，简而言之就是程序之中所有的操作都需要通过对象来完成。对象中有属性和方法。</p><ul><li>举例<ul><li>操作浏览器要使用window对象</li><li>操作网页要使用document对象</li><li>操作控制台要使用console对象</li></ul></li></ul><h2 id="2-类（class）"><a href="#2-类（class）" class="headerlink" title="2.类（class）"></a>2.类（class）</h2><ul><li><p>使用class关键字来定义一个类</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token comment">/*         直接定义的属性是实例属性，需要通过对象的实例去访问；            const per = new Person();            per.name        使用static的开头的属性是静态属性（类型），可以直接通过类去访问            Person.age        readonly 开头的属性表示一个只读的属性无法修改    */</span>        <span class="token comment">//定义实例属性</span>    <span class="token comment">// name: string = '孙悟空';</span>    <span class="token comment">// readonly name: string = '孙悟空';</span>    name <span class="token operator">=</span> <span class="token string">'孙悟空'</span><span class="token punctuation">;</span>    <span class="token comment">// 在属性前使用static关键字可以定义类属性（静态属性）</span>    <span class="token comment">// static readonly age: number = 18;</span>    age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    <span class="token comment">//定义方法</span>    <span class="token comment">/*         如果方法以static开头则方法就是类方法，可以直接通过类去调用    */</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello 大家好！"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//new 一个实例</span><span class="token keyword">const</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>per<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'tom'</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// console.log(Person.age); //static时可以使用</span><span class="token comment">// Person.sayHello();//static时可以使用</span>per<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-构造函数和this"><a href="#3-构造函数和this" class="headerlink" title="3.构造函数和this"></a>3.构造函数和this</h2><ul><li><p>constructor 被称为构造函数，会在对象创建时调用</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span>  <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 在实例方法中，this就表示当前的实例</span>        <span class="token comment">// 在构造函数中当前对象就是当前新建的那个对象</span>        <span class="token comment">// 可以通过this向新建的对象中添加属性</span>        <span class="token comment">// console.log(this);</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">,</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">}</span>    <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'汪汪汪！！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'小黑'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> dog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'小白'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-继承"><a href="#4-继承" class="headerlink" title="4.继承"></a>4.继承</h2><ul><li><p>使用<strong>extends</strong>继承后，子类将会拥有父类所有的方法和属性</p></li><li><p>通过继承可以将多个类中共有的代码写在一个父类，这样只需要写一次即可让所有的子类都同时拥有父类中的属性和方法</p></li><li><p>如果子类中添加了和父类相同的方法，则子类方法会覆盖掉父类的方法。这种子类覆盖掉父类方法的形式，我们称为重写</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 定义一个Animal类</span>    <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>        age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'动物在叫!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//定义一个表示狗的类</span>    <span class="token comment">//使Dog类继承Animal类（此时，Animal被称为父类，Dog被称为子类）</span>    <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在跑啊~~</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'汪汪汪!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 定义一个猫的类</span>    <span class="token comment">//使Cat类继承Animal类</span>    <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'喵喵喵!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'旺财'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'咪咪'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>    dog<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dog<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>    cat<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5-super"><a href="#5-super" class="headerlink" title="5.super"></a>5.super</h2><ul><li>在类的方法中，super表示当前类的父类（也称为超类）</li></ul><p><strong>如果在子类中写了构造函数，则在子类构造函数中必须对父类的构造函数进行调用</strong></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'动物在叫~~'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>        age<span class="token operator">:</span> <span class="token builtin">number</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//如果在子类中写了构造函数，在子类构造函数中必须对父类的构造函数进行调用</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用父类的构造函数</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 在类的方法中 super就表示当前类的父类</span>            <span class="token comment">// super.sayHello();</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'汪汪汪~~'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dog<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-抽象类（ts新增的）"><a href="#6-抽象类（ts新增的）" class="headerlink" title="6.抽象类（ts新增的）"></a>6.抽象类（ts新增的）</h2><p><strong>特点</strong></p><ul><li><p>以abstract 开头的类是抽象类</p></li><li><p>抽象类和其他类区别不大，只是不能用来创建对象</p></li><li><p>抽象类就是专门用来被继承的类</p></li><li><p>抽象类中可以添加抽象方法</p></li></ul><p><strong>抽象方法</strong>：抽象方法使用abstract开头，没有方法体；抽象方法只能定义在抽象类中，子类必须对抽象方法进行重写。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 定义一个抽象方法</span>        <span class="token comment">// 抽象方法使用abstract开头，没有方法体</span>        <span class="token comment">// 抽象方法只能定义在抽象类中，子类必须对抽象方法进行重写</span>        <span class="token keyword">abstract</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'汪汪汪~~'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'喵喵喵~~'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dog<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// const an = new Animal();//无法创建抽象类的实例</span>    dog<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-接口（ts新增的）"><a href="#7-接口（ts新增的）" class="headerlink" title="7.接口（ts新增的）"></a>7.接口（ts新增的）</h2><p>接口用来定义一个类结构, 用来定义一个类中应该包含哪些属性和方法；同时接口也可以当成类型声明去使用。</p><p><strong>特点</strong></p><ul><li>接口可以在定义类的时候去限制类的结构</li><li>接口中所有的属性都不能有实际的值</li><li>接口只定义对象的结构，而不考虑实际值</li><li>在接口中所有的方法都是抽象类</li></ul><p><strong>基本使用</strong></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">interface</span> <span class="token class-name">myInter</span><span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>                <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*         定义类时，可以使类去实现一个接口            实现接口就是使类满足接口的要求    */</span>    <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">implements</span> <span class="token class-name">myInter</span><span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"大家好~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>同时接口也可以当成类型声明去使用</strong></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">myInterface</span><span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>        age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">myInterface</span><span class="token punctuation">{</span>        gender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> obj<span class="token operator">:</span> myInterface <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'sss'</span><span class="token punctuation">,</span>        age<span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">,</span>        gender<span class="token operator">:</span> <span class="token string">'男'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//此外，对象的类型声明还有一种方法——用别名</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 描述一个对象的类型</span>    <span class="token keyword">type</span> <span class="token class-name">myType</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>        age<span class="token operator">:</span> <span class="token builtin">number</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj<span class="token operator">:</span> myType <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'sss'</span><span class="token punctuation">,</span>        age<span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口与抽象类类似，区别在于</p><ul><li>抽象类可以有抽象方法也可以有普通方法；但接口只能有抽象方法</li><li>抽象类使用extends继承；接口使用implements实现</li></ul><h2 id="8-属性的封装"><a href="#8-属性的封装" class="headerlink" title="8.属性的封装"></a>8.属性的封装</h2><ol><li><p>TS可以在类中的属性前添加属性的修饰符</p><ul><li>public 修饰的属性可以在任意位置访问（修改）<strong>默认值</strong></li><li>private 私有属性, 私有属性只能在类内部进行访问（修改）；但可以通过在类中添加方法使得私有属性可以被外部访问</li><li>protected 受保护的属性,只能在当前类和当前类的子类中访问(修改)</li></ul></li><li><p>js和ts封装属性的区别</p><p>由于属性是在对象中设置的，属性可以任意的被修改，将会导致对象中的数据变得非常不安全。因此需要对属性进行封装。</p><p><strong>js封装的属性存取器使用时需要调用相应的getter和setter方法；而ts封装的属性存取器使用时可直接当作变量来用就行。</strong></p><p><em>加getter和setter方法只是为了对属性的值做判断，如果不需做判断则没必要使用。</em></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 定义一个表示人的类</span>    <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> _name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> _age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/*             getter 方法来读取属性            setter 方法来设置属性                - 他们被称为属性的存取器        */</span>       <span class="token comment">/*  js中封装的属性存取器       // 定义方法 用来获取name属性        getName(){            return this._name;        }        //  定义方法，用来设置name属性        setName(value: string){            this._name = value;        }        getAge(){            return this._age;        }        setAge(value: number){            // 判断年龄是否合法            if(value &gt;= 0){                this._age = value;            }        }         */</span>        <span class="token comment">// TS中设置getter方法的方式</span>        <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get name()执行了!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>value<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span>value<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> value            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*         js封装的属性存取器使用时需要调用相应的getter和setter方法；        而ts封装的属性存取器使用时可直接当作变量来用就行    */</span>    <span class="token comment">// per._name = '猪八戒';</span>    <span class="token comment">// per._age = -38;</span>    <span class="token comment">// per.setName('猪八戒');</span>    <span class="token comment">// per.setAge(-33);</span>    <span class="token comment">// console.log(per);</span>    per<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span class="token punctuation">;</span>    per<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">13</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在定义类时可以直接将属性定义在构造函数中（简化代码），实际上是语法糖</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// class C{</span><span class="token comment">//     name: string;</span><span class="token comment">//     age: number;</span><span class="token comment">//     // 可以直接将属性定义在构造函数中</span><span class="token comment">//     constructor(name: string, age:number){</span><span class="token comment">//         this.name = name;</span><span class="token comment">//         this,age = age;</span><span class="token comment">//     }</span><span class="token comment">// }</span>   <span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span><span class="token punctuation">{</span>    <span class="token comment">// 语法糖</span>    <span class="token comment">// 可以直接将属性定义在构造函数中</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="9-泛型（ts新增的）"><a href="#9-泛型（ts新增的）" class="headerlink" title="9.泛型（ts新增的）"></a>9.泛型（ts新增的）</h2><p>泛型就是不确定的类型<strong>（定义时不确定，执行了才确定）</strong>。在定义函数或是类时,如果遇到类型不明确就可以使用泛型。</p><p><strong>在函数定义中使用</strong></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 可以直接调用具有泛型的函数</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不指定泛型,TS可以自动对类型进行推断</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">fn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//手动指定泛型</span><span class="token comment">// 泛型可以同时指定多个</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fn2</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token generic-function"><span class="token function">fn2</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，还能对泛型的类型进行限制</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Inter</span><span class="token punctuation">{</span>    length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// T extends Inter 表示泛型T必须是Inter实现类(子类)</span><span class="token comment">// 这里用的话即调用该函数的参数必须具有length属性，可以是数组，字符串...</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fn3</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Inter<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token function">fn3</span><span class="token punctuation">(</span><span class="token string">'124'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// fn3(1243);</span><span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在类定义中使用</strong></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">MyClass<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04TypeScript：使用webpack打包ts代码</title>
      <link href="/2021/08/04/04typescript-shi-yong-webpack-da-bao-ts-dai-ma/"/>
      <url>/2021/08/04/04typescript-shi-yong-webpack-da-bao-ts-dai-ma/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-webpack的简单使用"><a href="#1-webpack的简单使用" class="headerlink" title="1.webpack的简单使用"></a>1.webpack的简单使用</h2><p><em>一般项目中我们不会直接编译ts代码，而是使用打包工具来进行。</em></p><ul><li><p>初始化项目：<code>npm init -y</code></p></li><li><p>安装依赖：<code>cnpm i -D webpack webpack-cli typescript ts-loader</code>（四个包）</p><ul><li>webpack-cli—命令行工具</li><li>ts-loader—将ts代码和webpack能整合在一起</li></ul></li><li><p>新建webpack.config.js文件</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 引入一个包</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//webpack 中所有的配置信息都应该写在module.exports中</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">// 指定入口文件</span>    entry<span class="token operator">:</span> <span class="token string">"./src/index.ts"</span><span class="token punctuation">,</span>    <span class="token comment">// 指定打包文件所在目录</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">//指定打包文件的目录</span>        path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//打包后文件的名字</span>        filename<span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>        <span class="token comment">//告诉webpack不使用箭头函数</span>        environment<span class="token operator">:</span> <span class="token punctuation">{</span>            arrowFunction<span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//指定webpack打包时要使用的模块</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">// 指定要loader加载的规则</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token comment">// test指定的是规则生效的文件</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token comment">//以ts结尾的文件</span>                <span class="token comment">// 要使用的loader</span>                use<span class="token operator">:</span> <span class="token string">'ts-loader'</span><span class="token punctuation">,</span>                <span class="token comment">// 要排除的文件</span>                exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node-modules</span><span class="token regex-delimiter">/</span></span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">// 用来设置引用模块，可以将这些文件识别为模块</span>    resolve<span class="token operator">:</span> <span class="token punctuation">{</span>        extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.ts'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在package.json中加上build命令<code>"build": "webpack",</code></li><li>执行<code>npm run build</code>即可进行编译打包</li></ul><h2 id="2-webpack中常用的插件"><a href="#2-webpack中常用的插件" class="headerlink" title="2.webpack中常用的插件"></a>2.webpack中常用的插件</h2><p>1.<strong>html-webpack-plugin</strong>—html插件能帮助我们在打包时自动地生成html文件</p><p>此外，还得安装一个webpack插件<code>cnpm i -D html-webpack-plugin</code>，才能生成html文件</p><p>在上面的基础上进行配置该插件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 引入一个包</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 引入html插件</span><span class="token keyword">const</span> HTMLWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//webpack 中所有的配置信息都应该写在module.exports中</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">// 指定入口文件</span>    entry<span class="token operator">:</span> <span class="token string">"./src/index.ts"</span><span class="token punctuation">,</span>    <span class="token comment">// 指定打包文件所在目录</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">//指定打包文件的目录</span>        path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//打包后文件的名字</span>        filename<span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>        <span class="token comment">//告诉webpack不使用箭头函数</span>        environment<span class="token operator">:</span> <span class="token punctuation">{</span>            arrowFunction<span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//指定webpack打包时要使用的模块</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">// 指定要loader加载的规则</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token comment">// test指定的是规则生效的文件</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token comment">//以ts结尾的文件</span>                <span class="token comment">// 要使用的loader</span>                use<span class="token operator">:</span> <span class="token string">'ts-loader'</span><span class="token punctuation">,</span>                <span class="token comment">// 要排除的文件</span>                exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node-modules</span><span class="token regex-delimiter">/</span></span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">//配置Webpack 插件</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">HTMLWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment">// title: "这是一个自定义的title"、</span>            template<span class="token operator">:</span> <span class="token string">"./src/index.html"</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// 用来设置引用模块，可以将这些文件识别为模块</span>    resolve<span class="token operator">:</span> <span class="token punctuation">{</span>        extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.ts'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.<strong>webpack-dev-server</strong>—该插件能自动响应浏览器更新</p><ul><li><p>安装：<code>npm i -D webpack-dev-server</code></p></li><li><p>在package.json中加上start命令：<code>"start": "webpack serve --open chrome.exe"</code></p></li></ul><p>这样，就能在开发时实现热部署了。</p><p>3.<strong>clean-webpack-plugin</strong>—clean插件能在build前清空dist目录所有文件，避免旧文件的遗留</p><ul><li><p>安装：<code>npm i -D clean-webpack-plugin</code></p></li><li><p>使用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 引入一个包</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 引入html插件</span><span class="token keyword">const</span> HTMLWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入clean插件</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token comment">//webpack 中所有的配置信息都应该写在module.exports中</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">// 指定入口文件</span>    entry<span class="token operator">:</span> <span class="token string">"./src/index.ts"</span><span class="token punctuation">,</span>    <span class="token comment">// 指定打包文件所在目录</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">//指定打包文件的目录</span>        path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//打包后文件的名字</span>        filename<span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>        <span class="token comment">//告诉webpack不使用箭头函数</span>        environment<span class="token operator">:</span> <span class="token punctuation">{</span>            arrowFunction<span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//指定webpack打包时要使用的模块</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">// 指定要loader加载的规则</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token comment">// test指定的是规则生效的文件</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token comment">//以ts结尾的文件</span>                <span class="token comment">// 要使用的loader</span>                use<span class="token operator">:</span> <span class="token string">'ts-loader'</span><span class="token punctuation">,</span>                <span class="token comment">// 要排除的文件</span>                exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node-modules</span><span class="token regex-delimiter">/</span></span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">//配置Webpack 插件</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">HTMLWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment">// title: "这是一个自定义的title"、</span>            template<span class="token operator">:</span> <span class="token string">"./src/index.html"</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// 用来设置引用模块，可以将这些文件识别为模块</span>    resolve<span class="token operator">:</span> <span class="token punctuation">{</span>        extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.ts'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-Babel的使用"><a href="#3-Babel的使用" class="headerlink" title="3.Babel的使用"></a>3.Babel的使用</h2><p>为了使得代码能兼容不同浏览器，我们需要使用babel工具（与webpack结合一起使用）。</p><ul><li><p>安装依赖：<code>cnpm i -D @babel/core @babel/preset-env babel-loader core-js</code>（四个）</p><ul><li><p>@babel/core—babel核心的工具</p></li><li><p>@babel/preset-env—babel的预设环境</p></li><li><p>babel-loader—babel与webpack结合的工具</p></li><li><p>core-js—模拟js运行环境（使用时可以按需引入）</p></li></ul></li><li><p>修改webpack配置文件</p><p>在loader加载器中加入babel（loader中的执行顺序是从下往上，所以需要将’ts-loader’放在最后）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//指定webpack打包时要使用的模块</span>   module<span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token comment">// 指定要loader加载的规则</span>       rules<span class="token operator">:</span> <span class="token punctuation">[</span>           <span class="token punctuation">{</span>               <span class="token comment">// test指定的是规则生效的文件</span>               test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token comment">//以ts结尾的文件</span>               <span class="token comment">// 要使用的loader</span>               use<span class="token operator">:</span> <span class="token punctuation">[</span>                   <span class="token comment">// 配置babel</span>                   <span class="token punctuation">{</span>                       <span class="token comment">//指定加载器</span>                       loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>                       <span class="token comment">// 设置babel</span>                       options<span class="token operator">:</span> <span class="token punctuation">{</span>                           <span class="token comment">//设置预定义的环境</span>                           presets<span class="token operator">:</span> <span class="token punctuation">[</span>                               <span class="token punctuation">[</span>                                   <span class="token comment">//指定环境的插件</span>                                   <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>                                   <span class="token comment">// 配置信息</span>                                   <span class="token punctuation">{</span>                                       <span class="token comment">// 要兼容的目标浏览器及版本</span>                                       targets<span class="token operator">:</span> <span class="token punctuation">{</span>                                           <span class="token string">"chrome"</span><span class="token operator">:</span> <span class="token string">"58"</span><span class="token punctuation">,</span>                                           <span class="token string">"ie"</span><span class="token operator">:</span> <span class="token string">"11"</span>                                       <span class="token punctuation">}</span><span class="token punctuation">,</span>                                       <span class="token comment">//指定corejs的版本（根据package.json中的版本，只写整数）</span>                                       <span class="token string">"corejs"</span><span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>                                       <span class="token comment">//使用corejs的方式 "usage"  表示按需加载</span>                                       <span class="token string">"useBuiltIns"</span><span class="token operator">:</span> <span class="token string">"usage"</span>                                    <span class="token punctuation">}</span>                                 <span class="token punctuation">]</span>                           <span class="token punctuation">]</span>                       <span class="token punctuation">}</span>                   <span class="token punctuation">}</span><span class="token punctuation">,</span>                   <span class="token comment">// 'babel-loader', //简化版的配置</span>                   <span class="token string">'ts-loader'</span>               <span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token comment">// 要排除的文件</span>               exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node-modules</span><span class="token regex-delimiter">/</span></span>           <span class="token punctuation">}</span>       <span class="token punctuation">]</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>这样，webpack的基本配置就完成了，也是项目开发中常用的配置。下面是整合后的<strong>最终配置文件</strong>，开发时可以根据这个来做修改。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 引入一个包</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 引入html插件</span><span class="token keyword">const</span> HTMLWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入clean插件</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token comment">//webpack 中所有的配置信息都应该写在module.exports中</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">// 指定入口文件</span>    entry<span class="token operator">:</span> <span class="token string">"./src/index.ts"</span><span class="token punctuation">,</span>    <span class="token comment">// 指定打包文件所在目录</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">//指定打包文件的目录</span>        path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//打包后文件的名字</span>        filename<span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>        <span class="token comment">//告诉webpack不使用箭头函数</span>        environment<span class="token operator">:</span> <span class="token punctuation">{</span>            arrowFunction<span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//指定webpack打包时要使用的模块</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">// 指定要loader加载的规则</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token comment">// test指定的是规则生效的文件</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token comment">//以ts结尾的文件</span>                <span class="token comment">// 要使用的loader</span>                use<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token comment">// 配置babel</span>                    <span class="token punctuation">{</span>                        <span class="token comment">//指定加载器</span>                        loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>                        <span class="token comment">// 设置babel</span>                        options<span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token comment">//设置预定义的环境</span>                            presets<span class="token operator">:</span> <span class="token punctuation">[</span>                                <span class="token punctuation">[</span>                                    <span class="token comment">//指定环境的插件</span>                                    <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>                                    <span class="token comment">// 配置信息</span>                                    <span class="token punctuation">{</span>                                        <span class="token comment">// 要兼容的目标浏览器及版本</span>                                        targets<span class="token operator">:</span> <span class="token punctuation">{</span>                                            <span class="token string">"chrome"</span><span class="token operator">:</span> <span class="token string">"58"</span><span class="token punctuation">,</span>                                            <span class="token string">"ie"</span><span class="token operator">:</span> <span class="token string">"11"</span>                                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                                        <span class="token comment">//指定corejs的版本（根据package.json中的版本，只写整数）</span>                                        <span class="token string">"corejs"</span><span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>                                        <span class="token comment">//使用corejs的方式 "usage"  表示按需加载</span>                                        <span class="token string">"useBuiltIns"</span><span class="token operator">:</span> <span class="token string">"usage"</span>                                     <span class="token punctuation">}</span>                                <span class="token punctuation">]</span>                            <span class="token punctuation">]</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token comment">// 'babel-loader',</span>                    <span class="token string">'ts-loader'</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token comment">// 要排除的文件</span>                exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node-modules</span><span class="token regex-delimiter">/</span></span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//配置Webpack 插件</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">HTMLWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment">// title: "这是一个自定义的title"、</span>            template<span class="token operator">:</span> <span class="token string">"./src/index.html"</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 用来设置引用模块，可以将这些文件识别为模块</span>    resolve<span class="token operator">:</span> <span class="token punctuation">{</span>        extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.ts'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03TypeScript：编译选项</title>
      <link href="/2021/08/04/03typescript-bian-yi-xuan-xiang/"/>
      <url>/2021/08/04/03typescript-bian-yi-xuan-xiang/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-自动编译的两种方法"><a href="#1-自动编译的两种方法" class="headerlink" title="1.自动编译的两种方法"></a>1.自动编译的两种方法</h2><ul><li><code>tsc ts文件 -w</code>  能够对<strong>单个ts文件</strong>进行监视，若有修改则会自动重新编译。</li><li>新建一个tsconfig.json文件，然后在命令行执行<code>tsc -w</code>  可以对<strong>所有ts文件</strong>进行监视，若有修改则会自动重新编译。</li></ul><h2 id="2-tsconfig-json文件"><a href="#2-tsconfig-json文件" class="headerlink" title="2.tsconfig.json文件"></a>2.tsconfig.json文件</h2><p><strong>tsconfig.json 是ts编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译</strong></p><ol><li><p>include</p><ul><li>用来表示需要被编译的ts文件目录</li><li>路径:  **表示任意目录,  *表示任意文件</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/**/*"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>exclude</p><ul><li>用来表示不需要被编译的文件目录</li><li>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"./src/hello/**/*"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>extends</p><ul><li>定义被继承的配置文件</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">//表示当前配置文件中会自动包含config目录下base.json中的所有配置信息</span><span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"./configs/base"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>files</p><ul><li>指定被编译文件的列表，只有需要编译的文件少时才会用到</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"core.ts"</span><span class="token punctuation">,</span><span class="token string">"sys.ts"</span><span class="token punctuation">,</span><span class="token string">"types.ts"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>compilerOptions</strong>（重要，编译器的选项）</p><p><em>compilerOptions有很多的子选项</em></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">//target 用来指定ts被编译为ES的版本</span>    <span class="token comment">//'es3', 'es5', 'es6', 'es2015', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'esnext'.</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es2015"</span><span class="token punctuation">,</span>       <span class="token comment">//module 指定要使用的模块化的规范</span>    <span class="token comment">//'none', 'commonjs', 'amd', 'system', 'umd', 'es6', 'es2015', 'es2020', 'esnext'</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"es2015"</span><span class="token punctuation">,</span>        <span class="token comment">//lib 用来指定项目所用的库</span>    <span class="token comment">// "lib": [],//一般情况下不需要设置（浏览器运行的就不用管，nodejs运行的再根据实际使用去指定）</span>    <span class="token comment">// 可选值：'es5', 'es6', 'es2015', 'es7', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'esnext', 'dom', </span>    <span class="token comment">// 'dom.iterable', 'webworker', 'webworker.importscripts', 'webworker.iterable', 'scripthost', 'es2015.core', 'es2015.collection', </span>    <span class="token comment">// 'es2015.generator', 'es2015.iterable', 'es2015.promise', 'es2015.proxy', 'es2015.reflect', 'es2015.symbol', 'es2015.symbol.wellknown', 'es2016.array.include',</span>    <span class="token comment">//  'es2017.object', 'es2017.sharedmemory', 'es2017.string', 'es2017.intl', 'es2017.typedarrays', 'es2018.asyncgenerator', 'es2018.asynciterable', 'es2018.intl', </span>    <span class="token comment">// 'es2018.promise', 'es2018.regexp', 'es2019.array', 'es2019.object', 'es2019.string', 'es2019.symbol', 'es2020.bigint', 'es2020.promise', </span>    <span class="token comment">// 'es2020.sharedmemory', 'es2020.string', 'es2020.symbol.wellknown', 'es2020.intl', 'esnext.array', 'esnext.symbol', 'esnext.asynciterable', 'esnext.intl',</span>          <span class="token comment">//outDir 用来指定编译后文件所在的目录</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>       <span class="token comment">//outFile 将代码合并为一个文件</span>    <span class="token comment">// 设置outFile后，所有的全局作用域中的代码会合并到同一个文件中</span>    <span class="token comment">// "outFile": "./dist/app.js",</span>       <span class="token comment">// 是否对js文件进行编译，默认是false</span>    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token comment">// 是否检查js代码是否符合语法规范，默认值是false</span>    <span class="token property">"checkJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token comment">// 是否移除注释</span>    <span class="token property">"removeComments"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token comment">// 不生成编译后的文件</span>    <span class="token property">"noEmit"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>       <span class="token comment">// 当有错误时不生成编译文件</span>    <span class="token property">"noEmitOnError"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token comment">// 所有严格检查的总开关，包括下面四个（如果相同的话可以直接用这个，下面四个省略）</span>    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token comment">// 用来设置编译后的文件是否使用严格模式，默认是false</span>    <span class="token property">"alwaysStrict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token comment">// 不允许隐式的any类型</span>    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token comment">// 不允许不明确类型的this</span>    <span class="token property">"noImplicitThis"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token comment">// 严格检查空值</span>    <span class="token property">"strictNullChecks"</span><span class="token operator">:</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02TypeScript：类型声明和变量类型</title>
      <link href="/2021/08/04/02typescript-lei-xing-sheng-ming-he-bian-liang-lei-xing/"/>
      <url>/2021/08/04/02typescript-lei-xing-sheng-ming-he-bian-liang-lei-xing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-类型声明"><a href="#1-类型声明" class="headerlink" title="1.类型声明"></a>1.类型声明</h2><ul><li>直接在变量声明后面加</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span> <span class="token comment">// 此行代码会报错，但是可以编译成js（也可以设置为报错不能编译成功）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果变量的声明和赋值是同时进行的，TS可以自动对变量进行类型检测</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>还可以对函数参数和返回值的类型进行声明</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-变量类型"><a href="#2-变量类型" class="headerlink" title="2.变量类型"></a>2.变量类型</h2><p><img src="https://img-blog.csdnimg.cn/15812c21a1554186ba93082dc6c1a4c1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JlcnRpbA==,size_16,color_FFFFFF,t_70" alt="请添加图片描述"></p><ol><li><p>number</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>string</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>boolean</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> c<span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>字面量</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> a1<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">;</span>a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//后面使用时不可修改，类似常量</span><span class="token comment">//可以使用 | 来连接多个类型（联合类型）</span><span class="token keyword">let</span> b1<span class="token operator">:</span> <span class="token string">"male"</span> <span class="token operator">|</span> <span class="token string">"female"</span><span class="token punctuation">;</span>b1<span class="token operator">=</span> <span class="token string">"male"</span><span class="token punctuation">;</span>b1<span class="token operator">=</span> <span class="token string">"female"</span><span class="token punctuation">;</span><span class="token keyword">let</span> c1 <span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>c1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>c1 <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>any</p><ul><li>any 表示的是任意类型，一个变量设置类型为any后相当于对该变量关闭了TS的类型检测</li><li>使用TS时，不建议使用any类型（尽量避免）</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// let d:any;（显示的any）</span><span class="token comment">//声明变量如果不指定类型，则TS解析器会自动判断变量的类型为any（隐式的any）</span><span class="token keyword">let</span> d<span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token string">'true'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>unknown</p><ul><li>unknown 实际上就是一个类型安全的any</li><li>unknown 类型的变量，不能直接赋值给其他变量</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//unknown表示未知类型的值</span><span class="token keyword">let</span> e<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span>e <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>e <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>e <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <em>any类型的变量可以赋值给任意变量；但unknown 类型的变量不能直接赋值给其他变量</em></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> s<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span><span class="token comment">//d的类型是any，它可以赋值给任意变量</span><span class="token keyword">let</span> d<span class="token punctuation">;</span>s <span class="token operator">=</span> d<span class="token punctuation">;</span><span class="token keyword">let</span> e<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span>e <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>s <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment">//会报错，e的类型是unknown，不能直接赋值给其他变量</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> e <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>类型断言</strong>—可以用来告诉解析器变量的实际类型</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/*语法：    变量 as 类型    &lt;类型&gt;变量*/</span>s <span class="token operator">=</span> e <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>e<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>void</p><p> void 用来表示空值，以函数为例，就表示没有返回值（或返回undefined）的函数</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>never</p><p> never 表示永远不会返回结果；没有值（比较少用，一般是用来抛出错误）</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"报错了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>object</p><p> 1.{ } 用来指定对象中可以包含哪些属性</p></li></ol>   <pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/*      语法：{属性名：属性值，属性名：属性值}    在属性名后面加上？，表示属性是可选的*/</span><span class="token keyword">let</span> b<span class="token operator">:</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//没有的话就会报错</span>b <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">"孙悟空"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> c1<span class="token operator">:</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> a<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span><span class="token punctuation">;</span>c1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span> a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">}</span> <span class="token comment">//会报错，多余了c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2.[propName: string]: any 表示可以多余任意类型的属性</code></pre>   <pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> c<span class="token operator">:</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">}</span>c <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> gender<span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>   <strong>设置函数结构的类型声明</strong></p>   <pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/*     语法:     (形参：类型，形参：类型...)=&gt; 返回值*/</span><span class="token keyword">let</span> <span class="token function-variable function">d1</span><span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">,</span>b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token builtin">number</span><span class="token punctuation">;</span><span class="token function-variable function">d1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>n1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="11"><li><p>array</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/*     数组的类型声明：        类型[]        Array&lt;类型&gt;*/</span><span class="token comment">//string[] 表示字符串数组</span><span class="token keyword">let</span> e1<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>e1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//number[] 表示数值数组</span><span class="token keyword">let</span> f<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> g<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>g <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>tuple（ts新增类型）</p><p>tuple(元组)：就是固定长度的数组</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/*     语法：[类型， 类型， 类型]*/</span><span class="token keyword">let</span> h<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>h <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>enum（ts新增类型）</p><p>枚举可以把所有可能的值都列举出来</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Gender<span class="token punctuation">{</span> <span class="token comment">//定义枚举类型可以把所有可能的值都列举出来</span>    Male <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    Female <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> i<span class="token operator">:</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> gender<span class="token operator">:</span> Gender<span class="token punctuation">}</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'孙悟空'</span><span class="token punctuation">,</span>    gender<span class="token operator">:</span> Gender<span class="token punctuation">.</span>Male<span class="token punctuation">}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>gender <span class="token operator">===</span> Gender<span class="token punctuation">.</span>Male<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>&amp; 表示同时满足</strong></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> j<span class="token operator">:</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token punctuation">;</span>j <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">'孙悟空'</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>类型的别名</strong></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">myType</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">let</span> k<span class="token operator">:</span> myType<span class="token punctuation">;</span><span class="token keyword">let</span> l<span class="token operator">:</span> myType<span class="token punctuation">;</span><span class="token keyword">let</span> m<span class="token operator">:</span> myType<span class="token punctuation">;</span>k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01TypeScript：初体验</title>
      <link href="/2021/08/04/01typescript-chu-ti-yan/"/>
      <url>/2021/08/04/01typescript-chu-ti-yan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-TypeScript概述"><a href="#1-TypeScript概述" class="headerlink" title="1.TypeScript概述"></a>1.TypeScript概述</h2><p><img src="https://img-blog.csdnimg.cn/ee7cf4510b614e69bd0685283072d17f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JlcnRpbA==,size_16,color_FFFFFF,t_70" alt="请添加图片描述"><br>TS增加了什么？</p><ol><li>类型</li><li>支持ES的新特性</li><li>添加ES不具备的新特性，比如接口、枚举…</li><li>丰富的配置选项，比如可以设置编译成任意版本的ES</li></ol><h2 id="2-TypeScript开发环境搭建"><a href="#2-TypeScript开发环境搭建" class="headerlink" title="2.TypeScript开发环境搭建"></a>2.TypeScript开发环境搭建</h2><ol><li>使用npm全局安装typescript<ul><li>进入命令行</li><li>输入：npm i -g typescript</li></ul></li><li>创建一个ts文件</li><li>使用tsc对ts文件进行编译<ul><li>进入命令行</li><li>进入ts文件所在目录</li><li>执行命令：tsc xxx.ts</li></ul></li></ol><h2 id="3-第一个案例"><a href="#3-第一个案例" class="headerlink" title="3.第一个案例"></a>3.第一个案例</h2><ul><li>新建空文件夹，创建一个hello.ts文件</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello TS'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用npm全局安装typescript</li><li>在命令行输入tsc hello.ts进行编译即可</li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础入门Flow</title>
      <link href="/2021/07/17/ling-ji-chu-ru-men-flow/"/>
      <url>/2021/07/17/ling-ji-chu-ru-men-flow/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Flow静态类型检查方案即javascript的类型检查器，能够作为解决javascript自身存在的类型系统不足问题的一种方法。</p><p>原理：把我们编写的代码和实际生产环境的代码分开，中间加入编译的环节，这样就能使用js的扩展语法，因为类型检测变得可能。 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token operator">:</span> number<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// a: number</span>    <span class="token comment">// b: any</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Flow只是一个小工具，可以为函数的参数添加注解来做类型判断，如上。</p><ul><li><p>安装：yarn add flow-bin –dev</p></li><li><p>使用的前提：关闭vscode的js语法检测功能，否则使用类型注解会报错</p></li><li><p>使用步骤</p><ul><li><p>1.在需要检查的文件开头添加  // @flow </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @flow</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token operator">:</span> number<span class="token punctuation">,</span> b<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">'100'</span><span class="token punctuation">,</span><span class="token string">'100'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2.初始化flow：yarn flow init（会生成一个flow配置文件）</p></li><li><p>3.执行flow：yarn flow</p></li></ul></li></ul><h2 id="（1）Flow编译自动移除类型注解"><a href="#（1）Flow编译自动移除类型注解" class="headerlink" title="（1）Flow编译自动移除类型注解"></a>（1）Flow编译自动移除类型注解</h2><p>两种方法</p><ul><li>通过官方提供的flow-remove-types（简单、快速）</li><li>通过babel去配合preset-flow插件</li></ul><h2 id="（2）Flow开发工具插件"><a href="#（2）Flow开发工具插件" class="headerlink" title="（2）Flow开发工具插件"></a>（2）Flow开发工具插件</h2><p>在vscode中通过安装Flow Language Support插件，能直观体现代码类型的问题，而不是通过在控制台看</p><h2 id="（3）Flow类型推断"><a href="#（3）Flow类型推断" class="headerlink" title="（3）Flow类型推断"></a>（3）Flow类型推断</h2><p>根据代码中的使用情况去推断变量的类型，称为类型推断。虽然Flow能帮我们做类型推断，但是为了更好的代码可读性，一般添加类型注解。</p><h2 id="（4）Flow类型注解"><a href="#（4）Flow类型注解" class="headerlink" title="（4）Flow类型注解"></a>（4）Flow类型注解</h2><p>不仅能用于函数的参数上，还可以用于变量和函数的返回值上 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** 类型注解* * @flow*/</span><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n <span class="token operator">*</span> n<span class="token punctuation">}</span><span class="token keyword">let</span> num<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">100</span><span class="token comment">// num = 'string'  会报错</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">100</span>    <span class="token comment">//return 'string'  会报错</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="（5）Flow原始类型"><a href="#（5）Flow原始类型" class="headerlink" title="（5）Flow原始类型"></a>（5）Flow原始类型</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** 原始类型* * @flow*/</span><span class="token keyword">const</span> a<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">'foobar'</span><span class="token keyword">const</span> b<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">Infinity</span> <span class="token comment">// NaN   // 100</span><span class="token keyword">const</span> c<span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//true</span><span class="token keyword">const</span> d<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">const</span> e<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token keyword">const</span> f<span class="token operator">:</span> symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="（6）Flow数组类型"><a href="#（6）Flow数组类型" class="headerlink" title="（6）Flow数组类型"></a>（6）Flow数组类型</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.使用泛型来约束</span><span class="token keyword">const</span> arr1<span class="token operator">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">//2.使用number来约束</span><span class="token keyword">const</span> arr1<span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">//3.使用字面量来约束（这里是固定长度的数组，也称元组）</span><span class="token keyword">const</span> foo<span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span>number<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="（7）Flow对象类型"><a href="#（7）Flow对象类型" class="headerlink" title="（7）Flow对象类型"></a>（7）Flow对象类型</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token operator">:</span>string<span class="token punctuation">,</span>bar<span class="token operator">:</span>number<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token operator">:</span><span class="token string">'string'</span><span class="token punctuation">,</span>bar<span class="token operator">:</span><span class="token number">12345</span><span class="token punctuation">}</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token operator">?</span><span class="token operator">:</span>string<span class="token punctuation">,</span>bar<span class="token operator">:</span>number<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>bar<span class="token operator">:</span><span class="token number">12345</span><span class="token punctuation">}</span> <span class="token comment">//添加?表示foo这个属性可有可无</span><span class="token keyword">const</span> obj3<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">[</span>string<span class="token punctuation">]</span><span class="token operator">:</span>string<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">//这样做可以为该对象动态添加属性，如下，但这里动态键值只能是string</span>obj3<span class="token punctuation">.</span>key1 <span class="token operator">=</span> <span class="token string">'string'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="（8）Flow函数类型"><a href="#（8）Flow函数类型" class="headerlink" title="（8）Flow函数类型"></a>（8）Flow函数类型</h2> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//定义一个参数为回调函数（没有返回值）的函数，所以调用时参数里的回调函数不能有返回值或者返回undefined，这就是函数的类型限制</span><span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token function-variable function">callback</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">string<span class="token punctuation">,</span>number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="（9）Flow特殊类型"><a href="#（9）Flow特殊类型" class="headerlink" title="（9）Flow特殊类型"></a>（9）Flow特殊类型</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.字面量类型，如下，只能够存放自定义的值</span> <span class="token keyword">const</span> a<span class="token operator">:</span><span class="token string">'foo'</span> <span class="token operator">=</span> <span class="token string">'foo'</span> <span class="token keyword">const</span> type<span class="token operator">:</span><span class="token string">'success'</span><span class="token operator">|</span> <span class="token string">'warning'</span><span class="token operator">|</span><span class="token string">'danger'</span> <span class="token operator">=</span> <span class="token string">'success'</span>  <span class="token keyword">const</span> b<span class="token operator">:</span>string<span class="token operator">|</span>number <span class="token operator">=</span> <span class="token string">'string'</span>   type StringOrNumber <span class="token operator">=</span> string <span class="token operator">|</span> number  <span class="token comment">//type关键字 声明一个或类型</span> <span class="token keyword">const</span> b<span class="token operator">:</span>StringOrNumber  <span class="token operator">=</span> <span class="token string">'string'</span>   <span class="token comment">//2.maybe类型（值扩展了null和undefined）</span><span class="token keyword">const</span> gender<span class="token operator">:</span> <span class="token operator">?</span>number <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token comment">//变量前加上？则变为maybe类型，则值可以为null或者undefined或number类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="（10）Flow中的Mixed与Any"><a href="#（10）Flow中的Mixed与Any" class="headerlink" title="（10）Flow中的Mixed与Any"></a>（10）Flow中的Mixed与Any</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">mixed和any都可以接收任意类型的值，两者区别在于mixed是强类型（安全，但需要加类型判断），而any则是弱类型（不安全，主要用于兼容以前的代码）<span class="token comment">//以下两个函数调用时的参数可以为任意类型，如string | number | boolean | ...</span><span class="token keyword">function</span> <span class="token function">passMixed</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> mixed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//不加类型判断会报语法错，下同</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">*</span> value     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">passMixed</span><span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token function">passMixed</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">passAny</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    value<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    value <span class="token operator">*</span> value <span class="token punctuation">}</span><span class="token function">passAny</span><span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token function">passAny</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总而言之，Flow的学习主要用于理解vue/react源码时，能够看懂使用Flow的情况。</p><p>所有类型的描述文档（官网文档）：<a href="https://flow.org/en/docs/types/">https://flow.org/en/docs/types/</a></p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为何说TypeScript在前端领域中越来越重要</title>
      <link href="/2021/07/17/wei-he-shuo-typescript-zai-qian-duan-ling-yu-zhong-yue-lai-yue-chong-yao/"/>
      <url>/2021/07/17/wei-he-shuo-typescript-zai-qian-duan-ling-yu-zhong-yue-lai-yue-chong-yao/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>TypeScript作为前端领域的第二门语言，随着前端领域的快速发展，未来TypeScript可能会成为前端技能的必备。原因很简单，JavaScript自身存在类型系统不足的问题，在长周期开发的大型项目中，有很多的隐患。</p><p>本文先介绍语言的强类型与弱类型、静态类型与动态类型这些基础概念作铺垫，再剖析JavaScript类型系统不足的问题。</p><h2 id="一、强类型与弱类型（从类型安全的角度划分）"><a href="#一、强类型与弱类型（从类型安全的角度划分）" class="headerlink" title="一、强类型与弱类型（从类型安全的角度划分）"></a>一、强类型与弱类型（从类型安全的角度划分）</h2><p>区别：是否能够隐式类型转换<br>强类型会在语言层面限制函数的实参类型必须与形参类型相同，而弱类型在语言层面不会限制实参的类型。<br>即强类型语言中不允许任意的隐式类型转换，而弱类型语言则允许任意的隐式类型转换。</p><p>变量类型允许随时改变的特点，不是强弱类型的差异。如python是强类型语言，它的变量可以随时改变。</p><h2 id="二、静态类型与动态类型-（从类型检查的角度划分）"><a href="#二、静态类型与动态类型-（从类型检查的角度划分）" class="headerlink" title="二、静态类型与动态类型 （从类型检查的角度划分）"></a>二、静态类型与动态类型 （从类型检查的角度划分）</h2><p>区别：是否能够随时改变变量类型<br>静态类型：一个变量声明时它的类型就是明确的，声明过后，它的类型就不允许再修改。<br>动态类型：运行阶段才能够明确变量类型，而且变量的类型随时可以改变。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">100</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span> <span class="token comment">//ok</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>动态类型语言中的变量没有类型，而变量中所存放的值是有类型的，js就是标准的动态类型语言，如上。</p><h2 id="三、JavaScript自有类型系统的问题"><a href="#三、JavaScript自有类型系统的问题" class="headerlink" title="三、JavaScript自有类型系统的问题"></a>三、JavaScript自有类型系统的问题</h2><ul><li>弱类型且动态类型【任性，缺少了类型系统的可靠性】</li><li>js是脚本语言，没有编译环节</li></ul><p>小应用就很方便，但如今js已大规模运用，所以这种优势就成了短板。</p><p>（1）弱类型的问题</p><ul><li><p>只有在代码运行时才能检查出错误，而强类型则直接在编译时就能检查出问题。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// obj.foo()</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类型不明确可能会造成函数功能发生改变</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>弱类型会造成我们可能对对象索引器的错误用法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>obj<span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'true'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>以上问题在代码量小时可以通过约定来避免，但项目代码量一大，可能不是所有人会遵守约定，会隐藏有很多bug，还是强类型有保障。</p><p>（2）相比于弱类型，强类型有如下优势</p><ul><li>错误更早暴露</li><li>代码更智能，编码更准确（强类型的代码提示较多）</li><li>重构更牢靠（如修改了一个方法后，如果是js则调用这个方法的地方不会报错，ts的话编译就会报错了）</li><li>减少不必要的类型判断（强类型不用对函数的参数另外加判断，因为参数本身就有要求了）</li></ul><p>总结：JavaScript是弱类型且动态类型的语言，自身存在类型系统不足的问题，然而TypeScript能够解决它的不足，因此，在长周期开发的大型项目中，TypeScript往往更适合作为首选的开发语言。</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十分常用的linux基础命令，手动收藏！！</title>
      <link href="/2021/04/27/git-chang-yong-ming-ling-da-quan-fei-chang-shi-yong/"/>
      <url>/2021/04/27/git-chang-yong-ming-ling-da-quan-fei-chang-shi-yong/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>1.在想要同步的文件夹中初始化git</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.存入暂存区，提交至本地</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token function">git</span> commit -m <span class="token string">"测试"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.可以查看所有分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch // 查看本地分支<span class="token function">git</span> branch -a // 查看全部分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.添加远程分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin https://gitee.com/****/aa.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.刷新分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.本地分支关联远程分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/远程分支名称  本地分支名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.创建本地分支关联远程分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>分支名<span class="token punctuation">]</span> <span class="token punctuation">[</span>远程名<span class="token punctuation">]</span>/<span class="token punctuation">[</span>分支名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.切换分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout 本地分支/远程分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9.显示所有的操作记录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reflog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10.查看刚才提交的 commit id</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>11..版本回退</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard 11056c70（代码版本号）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>12.git全局用户设置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"***"</span><span class="token function">git</span> config --global user.email <span class="token string">"*******@gmail.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>13.查看git配置信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>14.拉代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>15.拉代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push <span class="token punctuation">(</span>-u origin master<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color="red">如有错漏之处，请联系站长修改！</font><br> </p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十分常用的linux基础命令，手动收藏！！</title>
      <link href="/2021/02/05/shi-fen-chang-yong-de-linux-ji-chu-ming-ling-shou-dong-shou-cang/"/>
      <url>/2021/02/05/shi-fen-chang-yong-de-linux-ji-chu-ming-ling-shou-dong-shou-cang/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://img-blog.csdnimg.cn/20210205171931973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JlcnRpbA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ClickHouse常用高阶函数</title>
      <link href="/2020/12/19/clickhouse-chang-yong-gao-jie-han-shu/"/>
      <url>/2020/12/19/clickhouse-chang-yong-gao-jie-han-shu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://img-blog.csdnimg.cn/20201219225856160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JlcnRpbA==,size_16,color_FFFFFF,t_70" alt="ClickHouse常用高阶函数汇总"></p><h3 id="一、去重"><a href="#一、去重" class="headerlink" title="一、去重"></a>一、去重</h3><h4 id="1-arrayDistinct"><a href="#1-arrayDistinct" class="headerlink" title="1.arrayDistinct"></a>1.arrayDistinct</h4><p>对数组进行去重</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> arrayDistinct<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-arrayUniq"><a href="#2-arrayUniq" class="headerlink" title="2.arrayUniq"></a>2.arrayUniq</h4><p>计算数组中有多少个不重复的值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> arrayUniq<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-arrayCompact"><a href="#3-arrayCompact" class="headerlink" title="3.arrayCompact"></a>3.arrayCompact</h4><p>对数组内数据实现相邻去重</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> arrayCompact<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、数组属性"><a href="#二、数组属性" class="headerlink" title="二、数组属性"></a>二、数组属性</h3><h4 id="1-arrayJoin"><a href="#1-arrayJoin" class="headerlink" title="1.arrayJoin"></a>1.arrayJoin</h4><p>对数组进行展开操作，行变列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> arrayJoin<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-arrayFilter"><a href="#2-arrayFilter" class="headerlink" title="2.arrayFilter"></a>2.arrayFilter</h4><p>筛选出数组中满足条件的数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> a <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> arrayFilter<span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token operator">&gt;</span>x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-arrayEnumerate"><a href="#3-arrayEnumerate" class="headerlink" title="3.arrayEnumerate"></a>3.arrayEnumerate</h4><p>返回数组下标</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> arrayEnumerate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-arrayReduce"><a href="#4-arrayReduce" class="headerlink" title="4.arrayReduce"></a>4.arrayReduce</h4><p>对数组进行聚合操作，如有min 、max、avg 等</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> arrayReduce<span class="token punctuation">(</span><span class="token string">'avg'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-arrayEnumerateDense"><a href="#5-arrayEnumerateDense" class="headerlink" title="5.arrayEnumerateDense"></a>5.arrayEnumerateDense</h4><p>标记出数组中相同的元素</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> arrayEnumerateDense<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-hasAny"><a href="#6-hasAny" class="headerlink" title="6.hasAny"></a>6.hasAny</h4><p>判断数组中是否包含某些值中任意一个值，若包含则返回1，否则返回0</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> hasAny<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-hasAll"><a href="#7-hasAll" class="headerlink" title="7.hasAll"></a>7.hasAll</h4><p>判断数组中是否包含某些值中所有值，若包含则返回1，否则返回0</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> hasAll<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-arrayWithConstant"><a href="#8-arrayWithConstant" class="headerlink" title="8.arrayWithConstant"></a>8.arrayWithConstant</h4><p>生成一个指定长度的数组</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> arrayWithConstant<span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三、切割-拼接"><a href="#三、切割-拼接" class="headerlink" title="三、切割/拼接"></a>三、切割/拼接</h3><h4 id="1-arrayStringConcat"><a href="#1-arrayStringConcat" class="headerlink" title="1.arrayStringConcat"></a>1.arrayStringConcat</h4><p>将数组元素按照给定分隔符进行拼接，返回拼接后的字符串（数组元素必须为String类型）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> arrayStringConcat<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token string">'2020'</span><span class="token punctuation">,</span><span class="token string">'12'</span><span class="token punctuation">,</span><span class="token string">'19'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-arraySlice"><a href="#2-arraySlice" class="headerlink" title="2.arraySlice"></a>2.arraySlice</h4><p>对数组进行切割 ，后面两个参数分别是切割的位置和切割后的段数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> arraySlice<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="四、排序"><a href="#四、排序" class="headerlink" title="四、排序"></a>四、排序</h3><h4 id="1-arraySort"><a href="#1-arraySort" class="headerlink" title="1.arraySort"></a>1.arraySort</h4><p>对数组进行升序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> a <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> arraySort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-arrayReverseSort"><a href="#2-arrayReverseSort" class="headerlink" title="2.arrayReverseSort"></a>2.arrayReverseSort</h4><p>对数组进行降序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> a <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> arrayReverseSort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="五、添加-删除首尾元素"><a href="#五、添加-删除首尾元素" class="headerlink" title="五、添加/删除首尾元素"></a>五、添加/删除首尾元素</h3><h4 id="1-arrayPushFront"><a href="#1-arrayPushFront" class="headerlink" title="1.arrayPushFront"></a>1.arrayPushFront</h4><p>在数组首位添加元素</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> arrayPushFront<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-arrayPushBack"><a href="#2-arrayPushBack" class="headerlink" title="2.arrayPushBack"></a>2.arrayPushBack</h4><p>在数组末尾添加元素</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> arrayPushBack<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-arrayPopFront"><a href="#3-arrayPopFront" class="headerlink" title="3.arrayPopFront"></a>3.arrayPopFront</h4><p>删除数组中第一个元素</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> arrayPopFront<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-arrayPopBack"><a href="#4-arrayPopBack" class="headerlink" title="4.arrayPopBack"></a>4.arrayPopBack</h4><p>删除数组中最后一个元素</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> arrayPopBack<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="六、计算差值"><a href="#六、计算差值" class="headerlink" title="六、计算差值"></a>六、计算差值</h3><h4 id="1-arrayDifference"><a href="#1-arrayDifference" class="headerlink" title="1.arrayDifference"></a>1.arrayDifference</h4><p>计算数组中前后两个值的差值部分，该位=当前-前者（不包括第一个数，结果第一位默认为0）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> arrayDifference<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-runningDifference"><a href="#2-runningDifference" class="headerlink" title="2.runningDifference"></a>2.runningDifference</h4><p>计算某一列前后数值的差值，该位=当前-前者（不包括第一个数，结果第一位默认为0）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> a<span class="token punctuation">,</span>runningDifference<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> arrayJoin<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ClickHouse </tag>
            
            <tag> SQL </tag>
            
            <tag> 高阶函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ClickHouse位图函数的用法</title>
      <link href="/2020/12/13/clickhouse-wei-tu-han-shu-de-yong-fa/"/>
      <url>/2020/12/13/clickhouse-wei-tu-han-shu-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、位图函数的概念"><a href="#一、位图函数的概念" class="headerlink" title="一、位图函数的概念"></a>一、位图函数的概念</h2><p>位图函数用于对两个位图对象进行计算，对于任何一个位图函数，计算结果都将返回一个位图对象。</p><h2 id="二、位图对象的构造方法"><a href="#二、位图对象的构造方法" class="headerlink" title="二、位图对象的构造方法"></a>二、位图对象的构造方法</h2><p>位图对象有两种构造方法。其一是由聚合函数groupBitmapState构造的，其二是由Array Object构造的。<b>同时还可以将位图对象转化为数组对象。</b></p><h2 id="三、位图函数的用法"><a href="#三、位图函数的用法" class="headerlink" title="三、位图函数的用法"></a>三、位图函数的用法</h2><p><img src="https://img-blog.csdnimg.cn/20201213135853978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JlcnRpbA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="（一）构造位图"><a href="#（一）构造位图" class="headerlink" title="（一）构造位图"></a>（一）构造位图</h3><h4 id="bitmapBuild"><a href="#bitmapBuild" class="headerlink" title="bitmapBuild"></a>bitmapBuild</h4><p>从无符号整数数组构建位图对象</p><blockquote><p>bitmapBuild(array)<br>注：array – 无符号整数数组</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（二）位图对象转化为数组对象"><a href="#（二）位图对象转化为数组对象" class="headerlink" title="（二）位图对象转化为数组对象"></a>（二）位图对象转化为数组对象</h3><h4 id="bitmapToArray"><a href="#bitmapToArray" class="headerlink" title="bitmapToArray"></a>bitmapToArray</h4><p>将位图转换为整数数组</p><blockquote><p>bitmapToArray(bitmap)<br>注：bitmap – 位图对象</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapToArray<span class="token punctuation">(</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（三）位图对象的属性"><a href="#（三）位图对象的属性" class="headerlink" title="（三）位图对象的属性"></a>（三）位图对象的属性</h3><h4 id="1-bitmapContains"><a href="#1-bitmapContains" class="headerlink" title="1.bitmapContains"></a>1.bitmapContains</h4><p>检查位图是否包含指定元素</p><blockquote><p>bitmapContains(haystack, needle)<br>注：<br>haystack – 位图对象<br>needle – 元素，类型UInt32</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapContains<span class="token punctuation">(</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> toUInt32<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-bitmapCardinality"><a href="#2-bitmapCardinality" class="headerlink" title="2.bitmapCardinality"></a>2.bitmapCardinality</h4><p>返回一个UInt64类型的数值，表示位图对象的基数</p><blockquote><p>bitmapCardinality(bitmap)<br>注：bitmap – 位图对象</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapCardinality<span class="token punctuation">(</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-bitmapMin"><a href="#3-bitmapMin" class="headerlink" title="3.bitmapMin"></a>3.bitmapMin</h4><p>返回一个UInt64类型的数值，表示位图中的最小值。如果位图为空则返回UINT32_MAX</p><blockquote><p>bitmapMin(bitmap)<br>注：bitmap – 位图对象</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapMin<span class="token punctuation">(</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-bitmapMax"><a href="#4-bitmapMax" class="headerlink" title="4.bitmapMax"></a>4.bitmapMax</h4><p>返回一个UInt64类型的数值，表示位图中的最大值。如果位图为空则返回0</p><blockquote><p>bitmapMax(bitmap)<br>注：bitmap – 位图对象</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapMax<span class="token punctuation">(</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（四）位图转换为新位图"><a href="#（四）位图转换为新位图" class="headerlink" title="（四）位图转换为新位图"></a>（四）位图转换为新位图</h3><h4 id="1-bitmapSubsetInRange"><a href="#1-bitmapSubsetInRange" class="headerlink" title="1.bitmapSubsetInRange"></a>1.bitmapSubsetInRange</h4><p>将位图指定范围（不包含range_end）转换为另一个位图</p><blockquote><p>bitmapSubsetInRange(bitmap, range_start, range_end)<br>注：<br>bitmap – 位图对象<br>range_start – 范围起始点（含）<br>range_end – 范围结束点（不含）</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapToArray<span class="token punctuation">(</span>bitmapSubsetInRange<span class="token punctuation">(</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> toUInt32<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> toUInt32<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-bitmapSubsetLimit"><a href="#2-bitmapSubsetLimit" class="headerlink" title="2.bitmapSubsetLimit"></a>2.bitmapSubsetLimit</h4><p>将位图指定范围（起始点和数目上限）转换为另一个位图</p><blockquote><p>bitmapSubsetLimit(bitmap, range_start, limit)<br>注：<br>bitmap – 位图对象<br>range_start – 范围起始点（含）<br>limit – 子位图基数上限</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapToArray<span class="token punctuation">(</span>bitmapSubsetLimit<span class="token punctuation">(</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> toUInt32<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> toUInt32<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（五）位图运算"><a href="#（五）位图运算" class="headerlink" title="（五）位图运算"></a>（五）位图运算</h3><h4 id="1-bitmapHasAny"><a href="#1-bitmapHasAny" class="headerlink" title="1.bitmapHasAny"></a>1.bitmapHasAny</h4><p>与hasAny(array，array)类似，如果位图有任何公共元素则返回1，否则返回0。<br>对于空位图，返回0。</p><blockquote><p>bitmapHasAny(bitmap,bitmap)<br>注：bitmap – bitmap对象</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapHasAny<span class="token punctuation">(</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-bitmapHasAll"><a href="#2-bitmapHasAll" class="headerlink" title="2.bitmapHasAll"></a>2.bitmapHasAll</h4><p>与hasAll(array，array)类似，如果第一个位图包含第二个位图的所有元素，则返回1，否则返回0。<br>如果第二个参数是空位图，则返回1。</p><blockquote><p>bitmapHasAll(bitmap,bitmap)<br>注：bitmap – bitmap 对象</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapHasAll<span class="token punctuation">(</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-bitmapAnd"><a href="#3-bitmapAnd" class="headerlink" title="3.bitmapAnd"></a>3.bitmapAnd</h4><p>为两个位图对象进行与操作，返回一个新的位图对象</p><blockquote><p>bitmapAnd(bitmap1,bitmap2)<br>注：<br>bitmap1 – 位图对象<br>bitmap2 – 位图对象</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapToArray<span class="token punctuation">(</span>bitmapAnd<span class="token punctuation">(</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-bitmapOr"><a href="#4-bitmapOr" class="headerlink" title="4.bitmapOr"></a>4.bitmapOr</h4><p>为两个位图对象进行或操作，返回一个新的位图对象</p><blockquote><p>bitmapOr(bitmap1,bitmap2)<br>注：<br>bitmap1 – 位图对象<br>bitmap2 – 位图对象</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapToArray<span class="token punctuation">(</span>bitmapOr<span class="token punctuation">(</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-bitmapXor"><a href="#5-bitmapXor" class="headerlink" title="5.bitmapXor"></a>5.bitmapXor</h4><p>为两个位图对象进行异或操作，返回一个新的位图对象</p><blockquote><p>bitmapXor(bitmap1,bitmap2)<br>注：<br>bitmap1 – 位图对象<br>bitmap2 – 位图对象</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapToArray<span class="token punctuation">(</span>bitmapXor<span class="token punctuation">(</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-bitmapAndnot"><a href="#6-bitmapAndnot" class="headerlink" title="6.bitmapAndnot"></a>6.bitmapAndnot</h4><p>计算两个位图的差异，返回一个新的位图对象</p><blockquote><p>bitmapAndnot(bitmap1,bitmap2)<br>注：<br>bitmap1 – 位图对象<br>bitmap2 – 位图对象</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapToArray<span class="token punctuation">(</span>bitmapAndnot<span class="token punctuation">(</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-bitmapAndCardinality"><a href="#7-bitmapAndCardinality" class="headerlink" title="7.bitmapAndCardinality"></a>7.bitmapAndCardinality</h4><p>为两个位图对象进行与操作，返回结果位图的基数</p><blockquote><p>bitmapAndCardinality(bitmap1,bitmap2)<br>注：<br>bitmap1 – 位图对象<br>bitmap2 – 位图对象</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapAndCardinality<span class="token punctuation">(</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-bitmapOrCardinality"><a href="#8-bitmapOrCardinality" class="headerlink" title="8.bitmapOrCardinality"></a>8.bitmapOrCardinality</h4><p>为两个位图进行或运算，返回结果位图的基数</p><blockquote><p>bitmapOrCardinality(bitmap1,bitmap2)<br>注：<br>bitmap1 – 位图对象<br>bitmap2 – 位图对象</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapOrCardinality<span class="token punctuation">(</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="9-bitmapXorCardinality"><a href="#9-bitmapXorCardinality" class="headerlink" title="9.bitmapXorCardinality"></a>9.bitmapXorCardinality</h4><p>为两个位图进行异或运算，返回结果位图的基数</p><blockquote><p>bitmapXorCardinality(bitmap1,bitmap2)<br>注：<br>bitmap1 – 位图对象<br>bitmap2 – 位图对象</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapXorCardinality<span class="token punctuation">(</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="10-bitmapAndnotCardinality"><a href="#10-bitmapAndnotCardinality" class="headerlink" title="10.bitmapAndnotCardinality"></a>10.bitmapAndnotCardinality</h4><p>计算两个位图的差异，返回结果位图的基数</p><blockquote><p>bitmapAndnotCardinality(bitmap1,bitmap2)<br>注：<br>bitmap1 – 位图对象<br>bitmap2 – 位图对象</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> bitmapAndnotCardinality<span class="token punctuation">(</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bitmapBuild<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>位图对象有两种构造方法。其一是由聚合函数groupBitmapState构造的，其二是由Array Object构造的。同时还可以将位图对象转化为数组对象。对于任何一个位图函数，计算结果都将返回一个位图对象。带有Has的判断函数返回的数值是逻辑值0或者1；带有Cardinality后缀的函数返回的数值是运算后的结果位图的基数；其他的位图运算返回的是结果位图，例如And，Or，Xor，Andnot等。</p>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ClickHouse </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
