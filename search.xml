<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试模板</title>
      <link href="/2021/08/17/ce-shi-mo-ban/"/>
      <url>/2021/08/17/ce-shi-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="博客模板"><a href="#博客模板" class="headerlink" title="博客模板"></a>博客模板</h1><h2 id="1-普通模板"><a href="#1-普通模板" class="headerlink" title="1.普通模板"></a>1.普通模板</h2><h3 id="1-1-test"><a href="#1-1-test" class="headerlink" title="1.1 test"></a>1.1 test</h3><h4 id="1-1-1-test"><a href="#1-1-1-test" class="headerlink" title="1.1.1 test"></a>1.1.1 test</h4><h2 id="2-推荐文章模板"><a href="#2-推荐文章模板" class="headerlink" title="2.推荐文章模板"></a>2.推荐文章模板</h2><h3 id="2-1-test"><a href="#2-1-test" class="headerlink" title="2.1 test"></a>2.1 test</h3>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript学习</title>
      <link href="/2021/08/17/typescript-xue-xi/"/>
      <url>/2021/08/17/typescript-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="TypeScript学习"><a href="#TypeScript学习" class="headerlink" title="TypeScript学习"></a>TypeScript学习</h2><h4 id="1-强类型与弱类型（从类型安全的角度划分）"><a href="#1-强类型与弱类型（从类型安全的角度划分）" class="headerlink" title="1.强类型与弱类型（从类型安全的角度划分）"></a>1.强类型与弱类型（从类型安全的角度划分）</h4><p>区别：是否能够隐式类型转换<br>强类型会在语言层面限制函数的实参类型必须与形参类型相同，而弱类型在语言层面不会限制实参的类型<br>即强类型语言中不允许任意的隐式类型转换，而弱类型语言则允许任意的隐式类型转换。</p><p>变量类型允许随时改变的特点，不是强弱类型的差异。如python是强类型语言，它的变量可以随时改变。</p><h4 id="2-静态类型与动态类型-（从类型检查的角度划分）"><a href="#2-静态类型与动态类型-（从类型检查的角度划分）" class="headerlink" title="2.静态类型与动态类型 （从类型检查的角度划分）"></a>2.静态类型与动态类型 （从类型检查的角度划分）</h4><p>区别：是否能够随时改变变量类型<br>静态类型：一个变量声明时它的类型就是明确的，声明过后，它的类型就不允许再修改<br>动态类型：运行阶段才能够明确变量类型，而且变量的类型随时可以改变</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">100</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span> <span class="token comment">//ok</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>动态类型语言中的变量没有类型，而变量中所存放的值是有类型的，js就是标准的动态类型语言，如上。</p><h4 id="3-JavaScript自有类型系统的问题"><a href="#3-JavaScript自有类型系统的问题" class="headerlink" title="3.JavaScript自有类型系统的问题"></a>3.JavaScript自有类型系统的问题</h4><ul><li>弱类型且动态类型【任性，缺少了类型系统的可靠性】</li><li>js是脚本语言，没有编译环节</li></ul><p>小应用就很方便，但如今js已大规模运用，所以这种优势就成了短板。</p><p>（1）弱类型的问题</p><ul><li><p>只有在代码运行时才能检查出错误，而强类型则直接在编译时就能检查出问题。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// obj.foo()</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类型不明确可能会造成函数功能发生改变</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>弱类型会造成我们可能对对象索引器的错误用法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>obj<span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'true'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>以上问题在代码量小时可以通过约定来避免，但项目代码量一大，可能不是所有人会遵守约定，会隐藏有很多bug，还是强类型有保障。</p><p>（2）相比于弱类型，强类型有如下优势</p><ul><li>错误更早暴露</li><li>代码更智能，编码更准确（强类型的代码提示较多）</li><li>重构更牢靠（如修改了一个方法后，如果是js则调用这个方法的地方不会报错，ts的话编译就会报错了）</li><li>减少不必要的类型判断（强类型不用对函数的参数另外加判断，因为参数本身就有要求了）</li></ul><h4 id="4-零基础入门Flow"><a href="#4-零基础入门Flow" class="headerlink" title="4.零基础入门Flow"></a>4.零基础入门Flow</h4><p>Flow静态类型检查方案即javascript的类型检查器，能够作为解决javascript自身存在的类型系统不足问题的一种方法。</p><p>原理：把我们编写的代码和实际生产环境的代码分开，中间加入编译的环节，这样就能使用js的扩展语法，因为类型检测变得可能。 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token operator">:</span> number<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// a: number</span>    <span class="token comment">// b: any</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Flow只是一个小工具，可以为函数的参数添加注解来做类型判断，如上。</p><ul><li><p>安装：yarn add flow-bin –dev</p></li><li><p>使用的前提：关闭vscode的js语法检测功能，否则使用类型注解会报错</p></li><li><p>使用步骤</p><ul><li><p>1.在需要检查的文件开头添加  // @flow </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @flow</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token operator">:</span> number<span class="token punctuation">,</span> b<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">'100'</span><span class="token punctuation">,</span><span class="token string">'100'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2.初始化flow：yarn flow init（会生成一个flow配置文件）</p></li><li><p>3.执行flow：yarn flow</p></li></ul></li></ul><p>（1）Flow编译自动移除类型注解</p><p>两种方法</p><ul><li>通过官方提供的flow-remove-types（简单、快速）</li><li>通过babel去配合preset-flow插件</li></ul><p>（2）Flow开发工具插件</p><p>在vscode中通过安装Flow Language Support插件，能直观体现代码类型的问题，而不是通过在控制台看</p><p>（3）Flow类型推断</p><p>根据代码中的使用情况去推断变量的类型，称为类型推断。虽然Flow能帮我们做类型推断，但是为了更好的代码可读性，一般添加类型注解。</p><p>（4）Flow类型注解</p><p>不仅能用于函数的参数上，还可以用于变量和函数的返回值上 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** 类型注解* * @flow*/</span><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n <span class="token operator">*</span> n<span class="token punctuation">}</span><span class="token keyword">let</span> num<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">100</span><span class="token comment">// num = 'string'  会报错</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">100</span>    <span class="token comment">//return 'string'  会报错</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（5）Flow原始类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** 原始类型* * @flow*/</span><span class="token keyword">const</span> a<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">'foobar'</span><span class="token keyword">const</span> b<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">Infinity</span> <span class="token comment">// NaN   // 100</span><span class="token keyword">const</span> c<span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//true</span><span class="token keyword">const</span> d<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">const</span> e<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token keyword">const</span> f<span class="token operator">:</span> symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（6）Flow数组类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.使用泛型来约束</span><span class="token keyword">const</span> arr1<span class="token operator">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">//2.使用number来约束</span><span class="token keyword">const</span> arr1<span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">//3.使用字面量来约束（这里是固定长度的数组，也称元组）</span><span class="token keyword">const</span> foo<span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span>number<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（7）Flow对象类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token operator">:</span>string<span class="token punctuation">,</span>bar<span class="token operator">:</span>number<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token operator">:</span><span class="token string">'string'</span><span class="token punctuation">,</span>bar<span class="token operator">:</span><span class="token number">12345</span><span class="token punctuation">}</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token operator">?</span><span class="token operator">:</span>string<span class="token punctuation">,</span>bar<span class="token operator">:</span>number<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>bar<span class="token operator">:</span><span class="token number">12345</span><span class="token punctuation">}</span> <span class="token comment">//添加?表示foo这个属性可有可无</span><span class="token keyword">const</span> obj3<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">[</span>string<span class="token punctuation">]</span><span class="token operator">:</span>string<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">//这样做可以为该对象动态添加属性，如下，但这里动态键值只能是string</span>obj3<span class="token punctuation">.</span>key1 <span class="token operator">=</span> <span class="token string">'string'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（8）Flow函数类型</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//定义一个参数为回调函数（没有返回值）的函数，所以调用时参数里的回调函数不能有返回值或者返回undefined，这就是函数的类型限制</span><span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token function-variable function">callback</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">string<span class="token punctuation">,</span>number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（9）Flow特殊类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.字面量类型，如下，只能够存放自定义的值</span> <span class="token keyword">const</span> a<span class="token operator">:</span><span class="token string">'foo'</span> <span class="token operator">=</span> <span class="token string">'foo'</span> <span class="token keyword">const</span> type<span class="token operator">:</span><span class="token string">'success'</span><span class="token operator">|</span> <span class="token string">'warning'</span><span class="token operator">|</span><span class="token string">'danger'</span> <span class="token operator">=</span> <span class="token string">'success'</span>  <span class="token keyword">const</span> b<span class="token operator">:</span>string<span class="token operator">|</span>number <span class="token operator">=</span> <span class="token string">'string'</span>   type StringOrNumber <span class="token operator">=</span> string <span class="token operator">|</span> number  <span class="token comment">//type关键字 声明一个或类型</span> <span class="token keyword">const</span> b<span class="token operator">:</span>StringOrNumber  <span class="token operator">=</span> <span class="token string">'string'</span>   <span class="token comment">//2.maybe类型（值扩展了null和undefined）</span><span class="token keyword">const</span> gender<span class="token operator">:</span> <span class="token operator">?</span>number <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token comment">//变量前加上？则变为maybe类型，则值可以为null或者undefined或number类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（10）Flow中的Mixed与Any</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">mixed和any都可以接收任意类型的值，两者区别在于mixed是强类型（安全，但需要加类型判断），而any则是弱类型（不安全，主要用于兼容以前的代码）<span class="token comment">//以下两个函数调用时的参数可以为任意类型，如string | number | boolean | ...</span><span class="token keyword">function</span> <span class="token function">passMixed</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> mixed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//不加类型判断会报语法错，下同</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">*</span> value     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">passMixed</span><span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token function">passMixed</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">passAny</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    value<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    value <span class="token operator">*</span> value <span class="token punctuation">}</span><span class="token function">passAny</span><span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token function">passAny</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总而言之，Flow的学习主要用于理解vue/react源码时，能够看懂使用Flow的情况。</p><p>所有类型的描述文档（官网文档）：<a href="https://flow.org/en/docs/types/">https://flow.org/en/docs/types/</a></p><h4 id="5-TypeScript基础语法"><a href="#5-TypeScript基础语法" class="headerlink" title="5.TypeScript基础语法"></a>5.TypeScript基础语法</h4><img src="C:\Users\86198\AppData\Roaming\Typora\typora-user-images\image-20210716230811464.png" alt="image-20210716230811464" style="zoom:50%;"> <ul><li><p>就算我们不使用TypeScript的类型系统，我们也能使用它的es新特性，能够代替之前我们使用babel去编译，TypeScript最低能编译成es3版本。</p></li><li><p>因为TypeScript最终都会编译成js，所以任何一种js运行环境都支持用TypeScript，如浏览器应用，node应用..</p></li><li><p>相比于Flow，TypeScript作为一门完整的编程语言，功能更为强大，生态也更健全、更完善。</p></li><li><p>小项目（灵活自由）可以选择js，大项目（长周期开发的）推荐选择ts</p></li></ul><p>TypeScript属于渐进式（渐进式即可以在学习过程中了解一个特性使用一个特性，其他的可以暂时用js编写）</p><p>（1）TypeScript快速上手</p><ul><li>安装：yarn add typescript –dev</li><li>编译：yarn tsc 文件名.ts</li></ul><p>tsc（即typescript compiler）作用：检查代码中的类型使用异常；移除类型注解；转换ecmascript的新特性。</p><p>【Hello案例】</p><p>首先，安装完typescript 模块后，新建一个hello.ts文件，编写如下代码；</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//在ts文件中也可以完全按照js标准语法编写代码</span><span class="token keyword">const</span> <span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'typescript'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，在控制台执行如下命令，会在目录中生成一个同名的js文件，它就是ts编译成js后生成的文件。</p><pre class="line-numbers language-none"><code class="language-none">tsc hello.ts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）TypeScript配置文件</p><p>TypeScript不仅可以编译某个ts文件，也可以编译整个项目。</p><p>（3）TypeScript原始类型</p><p>（4）TypeScript标准库声明</p><p>（5）TypeScript中文错误消息</p><p>（6）TypeScript作用域问题</p><p>（7）TypeScript Object类型</p><p>（8）TypeScript 数组类型</p><p>（9）TypeScript 元组类型</p><p>（10）TypeScript 枚举类型</p><p>（11）TypeScript 函数类型</p><p>（12）TypeScript 任意类型</p><p>（13）TypeScript 隐式类型推断</p><p>（14）TypeScript 类型断言</p><p>（15）TypeScript 接口</p><p>（16）TypeScript 类的基本使用</p><p>（17）TypeScript 类的访问修饰符</p><p>（18）TypeScript 类的只读属性</p><p>（19）TypeScript 类与接口</p><p>（20）TypeScript 抽象类</p><p>（21）TypeScript 泛型</p><p>（22）TypeScript 类型声明</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/13/hello-world/"/>
      <url>/2021/08/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>typora-vue-theme主题介绍</title>
      <link href="/2018/09/07/article-title-fu-ben/"/>
      <url>/2018/09/07/article-title-fu-ben/</url>
      
        <content type="html"><![CDATA[<p>c我的第一篇文章</p><h2 id="推荐文章模板"><a href="#推荐文章模板" class="headerlink" title="推荐文章模板"></a>推荐文章模板</h2><pre class="line-numbers language-none"><code class="language-none">title: 标题date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpg   **文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: `http://xxx.com/xxx.jpg`** top: true   **推荐文章（文章是否置顶），如果 `top` 值为 `true`，则会作为首页推荐文章** cover: true  **表示该文章是否需要加入到首页轮播封面中**coverImg: /images/1.jpg **表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片**toc: true**是否开启 TOC**summary: 文章摘要   **自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章**categories: Markdown    **文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类**tags:   **文章标签，一篇文章可以多个标签   **     - Typora  - Markdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">title: 标题date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpg  //普通文章去掉这三行即可top: true   cover: true  coverImg: /images/1.jpgtoc: truesummary: 文章摘要  categories: Markdown    tags:    - Typora  - Markdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora-vue-theme主题介绍</title>
      <link href="/2018/09/07/article-title/"/>
      <url>/2018/09/07/article-title/</url>
      
        <content type="html"><![CDATA[<p>c我的第一篇文章</p><h2 id="推荐文章模板"><a href="#推荐文章模板" class="headerlink" title="推荐文章模板"></a>推荐文章模板</h2><pre class="line-numbers language-none"><code class="language-none">title: 标题date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpg   **文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: `http://xxx.com/xxx.jpg`** top: true   **推荐文章（文章是否置顶），如果 `top` 值为 `true`，则会作为首页推荐文章** cover: true  **表示该文章是否需要加入到首页轮播封面中**coverImg: /images/1.jpg **表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片**toc: true**是否开启 TOC**summary: 文章摘要   **自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章**categories: Markdown    **文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类**tags:   **文章标签，一篇文章可以多个标签   **     - Typora  - Markdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">title: 标题date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpg  //普通文章去掉这三行即可top: true   cover: true  coverImg: /images/1.jpgtoc: truesummary: 文章摘要  categories: Markdown    tags:    - Typora  - Markdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
